// Generated by CIRCT firtool-1.62.0
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

// Standard header to adapt well known macros for prints and assertions.

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

module SRAMTemplate_5(	// src/main/scala/utils/SRAMTemplate.scala:68:7
  input         clock,	// src/main/scala/utils/SRAMTemplate.scala:68:7
                reset,	// src/main/scala/utils/SRAMTemplate.scala:68:7
  output        io_rreq_ready,	// src/main/scala/utils/SRAMTemplate.scala:70:14
  input         io_rreq_valid,	// src/main/scala/utils/SRAMTemplate.scala:70:14
  input  [8:0]  io_rreq_bits_setIdx,	// src/main/scala/utils/SRAMTemplate.scala:70:14
  output [16:0] io_rresp_data_0_tag,	// src/main/scala/utils/SRAMTemplate.scala:70:14
  output        io_rresp_data_0_valid,	// src/main/scala/utils/SRAMTemplate.scala:70:14
                io_rresp_data_0_dirty,	// src/main/scala/utils/SRAMTemplate.scala:70:14
  output [16:0] io_rresp_data_1_tag,	// src/main/scala/utils/SRAMTemplate.scala:70:14
  output        io_rresp_data_1_valid,	// src/main/scala/utils/SRAMTemplate.scala:70:14
                io_rresp_data_1_dirty,	// src/main/scala/utils/SRAMTemplate.scala:70:14
  output [16:0] io_rresp_data_2_tag,	// src/main/scala/utils/SRAMTemplate.scala:70:14
  output        io_rresp_data_2_valid,	// src/main/scala/utils/SRAMTemplate.scala:70:14
                io_rresp_data_2_dirty,	// src/main/scala/utils/SRAMTemplate.scala:70:14
  output [16:0] io_rresp_data_3_tag,	// src/main/scala/utils/SRAMTemplate.scala:70:14
  output        io_rresp_data_3_valid,	// src/main/scala/utils/SRAMTemplate.scala:70:14
                io_rresp_data_3_dirty,	// src/main/scala/utils/SRAMTemplate.scala:70:14
  input         io_wreq_valid,	// src/main/scala/utils/SRAMTemplate.scala:70:14
  input  [8:0]  io_wreq_bits_setIdx,	// src/main/scala/utils/SRAMTemplate.scala:70:14
  input  [16:0] io_wreq_bits_data_tag,	// src/main/scala/utils/SRAMTemplate.scala:70:14
  input         io_wreq_bits_data_dirty,	// src/main/scala/utils/SRAMTemplate.scala:70:14
  input  [3:0]  io_wreq_bits_waymask	// src/main/scala/utils/SRAMTemplate.scala:70:14
);

  wire [18:0] wdataword;	// src/main/scala/utils/SRAMTemplate.scala:92:22
  wire [8:0]  setIdx;	// src/main/scala/utils/SRAMTemplate.scala:91:19
  wire        realRen;	// src/main/scala/utils/SRAMTemplate.scala:89:38
  wire        wen;	// src/main/scala/utils/SRAMTemplate.scala:88:52
  wire [75:0] _array_ext_RW0_rdata;	// src/main/scala/utils/SRAMTemplate.scala:76:26
  reg         _resetState;	// src/main/scala/utils/SRAMTemplate.scala:80:30
  reg  [8:0]  _resetSet;	// src/main/scala/chisel3/util/Counter.scala:61:40
  assign wen = io_wreq_valid | _resetState;	// src/main/scala/utils/SRAMTemplate.scala:80:30, :88:52
  assign realRen = io_rreq_valid & ~wen;	// src/main/scala/utils/SRAMTemplate.scala:88:52, :89:{38,41}
  assign setIdx = _resetState ? _resetSet : io_wreq_bits_setIdx;	// src/main/scala/chisel3/util/Counter.scala:61:40, src/main/scala/utils/SRAMTemplate.scala:80:30, :91:19
  assign wdataword =
    _resetState ? 19'h0 : {io_wreq_bits_data_tag, 1'h1, io_wreq_bits_data_dirty};	// src/main/scala/utils/SRAMTemplate.scala:68:7, :80:30, :92:{22,47,78}
  always @(posedge clock) begin	// src/main/scala/utils/SRAMTemplate.scala:68:7
    if (reset) begin	// src/main/scala/utils/SRAMTemplate.scala:68:7
      _resetState <= 1'h1;	// src/main/scala/utils/SRAMTemplate.scala:68:7, :80:30
      _resetSet <= 9'h0;	// src/main/scala/chisel3/util/Counter.scala:61:40
    end
    else begin	// src/main/scala/utils/SRAMTemplate.scala:68:7
      _resetState <= ~(_resetState & (&_resetSet)) & _resetState;	// src/main/scala/chisel3/util/Counter.scala:61:40, :73:24, :117:24, :118:{16,23}, src/main/scala/utils/SRAMTemplate.scala:80:30, :82:{24,38}
      if (_resetState)	// src/main/scala/utils/SRAMTemplate.scala:80:30
        _resetSet <= _resetSet + 9'h1;	// src/main/scala/chisel3/util/Counter.scala:61:40, :77:24
    end
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_	// src/main/scala/utils/SRAMTemplate.scala:68:7
    `ifdef FIRRTL_BEFORE_INITIAL	// src/main/scala/utils/SRAMTemplate.scala:68:7
      `FIRRTL_BEFORE_INITIAL	// src/main/scala/utils/SRAMTemplate.scala:68:7
    `endif // FIRRTL_BEFORE_INITIAL
    initial begin	// src/main/scala/utils/SRAMTemplate.scala:68:7
      automatic logic [31:0] _RANDOM[0:0];	// src/main/scala/utils/SRAMTemplate.scala:68:7
      `ifdef INIT_RANDOM_PROLOG_	// src/main/scala/utils/SRAMTemplate.scala:68:7
        `INIT_RANDOM_PROLOG_	// src/main/scala/utils/SRAMTemplate.scala:68:7
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// src/main/scala/utils/SRAMTemplate.scala:68:7
        _RANDOM[/*Zero width*/ 1'b0] = `RANDOM;	// src/main/scala/utils/SRAMTemplate.scala:68:7
        _resetState = _RANDOM[/*Zero width*/ 1'b0][0];	// src/main/scala/utils/SRAMTemplate.scala:68:7, :80:30
        _resetSet = _RANDOM[/*Zero width*/ 1'b0][9:1];	// src/main/scala/chisel3/util/Counter.scala:61:40, src/main/scala/utils/SRAMTemplate.scala:68:7, :80:30
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// src/main/scala/utils/SRAMTemplate.scala:68:7
      `FIRRTL_AFTER_INITIAL	// src/main/scala/utils/SRAMTemplate.scala:68:7
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  array_512x76 array_ext (	// src/main/scala/utils/SRAMTemplate.scala:76:26
    .RW0_addr  (wen ? setIdx : io_rreq_bits_setIdx),	// src/main/scala/utils/SRAMTemplate.scala:76:26, :88:52, :91:19
    .RW0_en    (realRen | wen),	// src/main/scala/utils/SRAMTemplate.scala:76:26, :88:52, :89:38
    .RW0_clk   (clock),
    .RW0_wmode (wen),	// src/main/scala/utils/SRAMTemplate.scala:88:52
    .RW0_wdata ({4{wdataword}}),	// src/main/scala/utils/SRAMTemplate.scala:76:26, :92:22
    .RW0_rdata (_array_ext_RW0_rdata),
    .RW0_wmask (_resetState ? 4'hF : io_wreq_bits_waymask)	// src/main/scala/utils/SRAMTemplate.scala:80:30, :93:{20,37}
  );
  assign io_rreq_ready = ~_resetState & ~wen;	// src/main/scala/utils/SRAMTemplate.scala:68:7, :80:30, :88:52, :89:41, :101:{21,33}
  assign io_rresp_data_0_tag = _array_ext_RW0_rdata[18:2];	// src/main/scala/utils/SRAMTemplate.scala:68:7, :76:26, :98:78
  assign io_rresp_data_0_valid = _array_ext_RW0_rdata[1];	// src/main/scala/utils/SRAMTemplate.scala:68:7, :76:26, :98:78
  assign io_rresp_data_0_dirty = _array_ext_RW0_rdata[0];	// src/main/scala/utils/SRAMTemplate.scala:68:7, :76:26, :98:78
  assign io_rresp_data_1_tag = _array_ext_RW0_rdata[37:21];	// src/main/scala/utils/SRAMTemplate.scala:68:7, :76:26, :98:78
  assign io_rresp_data_1_valid = _array_ext_RW0_rdata[20];	// src/main/scala/utils/SRAMTemplate.scala:68:7, :76:26, :98:78
  assign io_rresp_data_1_dirty = _array_ext_RW0_rdata[19];	// src/main/scala/utils/SRAMTemplate.scala:68:7, :76:26, :98:78
  assign io_rresp_data_2_tag = _array_ext_RW0_rdata[56:40];	// src/main/scala/utils/SRAMTemplate.scala:68:7, :76:26, :98:78
  assign io_rresp_data_2_valid = _array_ext_RW0_rdata[39];	// src/main/scala/utils/SRAMTemplate.scala:68:7, :76:26, :98:78
  assign io_rresp_data_2_dirty = _array_ext_RW0_rdata[38];	// src/main/scala/utils/SRAMTemplate.scala:68:7, :76:26, :98:78
  assign io_rresp_data_3_tag = _array_ext_RW0_rdata[75:59];	// src/main/scala/utils/SRAMTemplate.scala:68:7, :76:26, :98:78
  assign io_rresp_data_3_valid = _array_ext_RW0_rdata[58];	// src/main/scala/utils/SRAMTemplate.scala:68:7, :76:26, :98:78
  assign io_rresp_data_3_dirty = _array_ext_RW0_rdata[57];	// src/main/scala/utils/SRAMTemplate.scala:68:7, :76:26, :98:78
endmodule

