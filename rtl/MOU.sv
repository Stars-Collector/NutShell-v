// Generated by CIRCT firtool-1.62.0
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

// Standard header to adapt well known macros for prints and assertions.

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

module MOU(	// src/main/scala/nutcore/backend/fu/MOU.scala:37:7
  input         clock,	// src/main/scala/nutcore/backend/fu/MOU.scala:37:7
                reset,	// src/main/scala/nutcore/backend/fu/MOU.scala:37:7
                io_in_valid,	// src/main/scala/nutcore/backend/fu/MOU.scala:38:14
  input  [6:0]  io_in_bits_func,	// src/main/scala/nutcore/backend/fu/MOU.scala:38:14
  input  [38:0] io_cfIn_pc,	// src/main/scala/nutcore/backend/fu/MOU.scala:38:14
  output [38:0] io_redirect_target,	// src/main/scala/nutcore/backend/fu/MOU.scala:38:14
  output        io_redirect_valid,	// src/main/scala/nutcore/backend/fu/MOU.scala:38:14
                _WIRE__bore,
                _WIRE__bore_0,
                _WIRE_1__bore,
                _WIRE_1__bore_0,
                _WIRE_1__bore_1
);

  wire [63:0] _LogPerfHelper_timer;	// difftest/src/main/scala/common/LogPerfControl.scala:60:79
  wire        _LogPerfHelper_logEnable;	// difftest/src/main/scala/common/LogPerfControl.scala:60:79
  wire        _GEN = io_in_valid & io_in_bits_func == 7'h1;	// src/main/scala/nutcore/backend/fu/MOU.scala:52:{27,36}, :53:33
  wire        _GEN_0 = io_in_valid & io_in_bits_func == 7'h2;	// src/main/scala/nutcore/backend/fu/MOU.scala:56:{24,33}, :57:33
  `ifndef SYNTHESIS	// src/main/scala/utils/Debug.scala:49:26
    always @(posedge clock) begin	// src/main/scala/utils/Debug.scala:49:26
      if ((`PRINTF_COND_) & _GEN & _LogPerfHelper_logEnable & ~reset) begin	// difftest/src/main/scala/common/LogPerfControl.scala:60:79, src/main/scala/nutcore/backend/fu/MOU.scala:53:33, src/main/scala/utils/Debug.scala:49:26, :50:15
        $fwrite(32'h80000002, "[%d] MOU: ", _LogPerfHelper_timer);	// difftest/src/main/scala/common/LogPerfControl.scala:60:79, src/main/scala/utils/Debug.scala:49:26
        $fwrite(32'h80000002, "Flush I$ at %x\n", io_cfIn_pc);	// src/main/scala/utils/Debug.scala:49:26, :50:15
      end
      if ((`PRINTF_COND_) & _GEN_0 & _LogPerfHelper_logEnable & ~reset) begin	// difftest/src/main/scala/common/LogPerfControl.scala:60:79, src/main/scala/nutcore/backend/fu/MOU.scala:57:33, src/main/scala/utils/Debug.scala:49:26, :50:15
        $fwrite(32'h80000002, "[%d] MOU: ", _LogPerfHelper_timer);	// difftest/src/main/scala/common/LogPerfControl.scala:60:79, src/main/scala/utils/Debug.scala:49:26
        $fwrite(32'h80000002, "Sfence.vma at %x\n", io_cfIn_pc);	// src/main/scala/utils/Debug.scala:49:26, :50:15
      end
    end // always @(posedge)
  `endif // not def SYNTHESIS
  LogPerfHelper LogPerfHelper (	// difftest/src/main/scala/common/LogPerfControl.scala:60:79
    .timer     (_LogPerfHelper_timer),
    .logEnable (_LogPerfHelper_logEnable),
    .clean     (/* unused */),
    .dump      (/* unused */)
  );
  assign io_redirect_target = io_cfIn_pc + 39'h4;	// src/main/scala/nutcore/backend/fu/MOU.scala:37:7, :49:36
  assign io_redirect_valid = io_in_valid;	// src/main/scala/nutcore/backend/fu/MOU.scala:37:7
  assign _WIRE__bore = _GEN;	// src/main/scala/nutcore/backend/fu/MOU.scala:37:7, :53:33
  assign _WIRE__bore_0 = _GEN;	// src/main/scala/nutcore/backend/fu/MOU.scala:37:7, :53:33
  assign _WIRE_1__bore = _GEN_0;	// src/main/scala/nutcore/backend/fu/MOU.scala:37:7, :57:33
  assign _WIRE_1__bore_0 = _GEN_0;	// src/main/scala/nutcore/backend/fu/MOU.scala:37:7, :57:33
  assign _WIRE_1__bore_1 = _GEN_0;	// src/main/scala/nutcore/backend/fu/MOU.scala:37:7, :57:33
endmodule

