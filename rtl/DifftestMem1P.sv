// Generated by CIRCT firtool-1.62.0
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

// Standard header to adapt well known macros for prints and assertions.

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

module DifftestMem1P(	// difftest/src/main/scala/common/Mem.scala:262:15
  input         clock,	// difftest/src/main/scala/common/Mem.scala:262:15
                reset,	// difftest/src/main/scala/common/Mem.scala:262:15
                read_valid,	// difftest/src/main/scala/common/Mem.scala:199:16
  input  [63:0] read_index,	// difftest/src/main/scala/common/Mem.scala:199:16
  output [63:0] read_data_0,	// difftest/src/main/scala/common/Mem.scala:199:16
  input         write_valid,	// difftest/src/main/scala/common/Mem.scala:204:17
  input  [63:0] write_index,	// difftest/src/main/scala/common/Mem.scala:204:17
                write_data_0	// difftest/src/main/scala/common/Mem.scala:204:17
);

  `ifndef SYNTHESIS	// difftest/src/main/scala/common/Mem.scala:263:9
    always @(posedge clock) begin	// difftest/src/main/scala/common/Mem.scala:263:9
      if (~reset & ~(~read_valid | ~write_valid)) begin	// difftest/src/main/scala/common/Mem.scala:214:16, :263:{9,10,22,25}
        if (`ASSERT_VERBOSE_COND_)	// difftest/src/main/scala/common/Mem.scala:263:9
          $error("Assertion failed: read and write come at the same cycle\n    at Mem.scala:263 assert(!read.valid || !write.valid, \"read and write come at the same cycle\")\n");	// difftest/src/main/scala/common/Mem.scala:263:9
        if (`STOP_COND_)	// difftest/src/main/scala/common/Mem.scala:263:9
          $fatal;	// difftest/src/main/scala/common/Mem.scala:263:9
      end
    end // always @(posedge)
  `endif // not def SYNTHESIS
  MemRWHelper helper_0 (	// difftest/src/main/scala/common/Mem.scala:197:49
    .r_enable (~reset & read_valid),	// difftest/src/main/scala/common/Mem.scala:214:{16,30}
    .r_index  (read_index),
    .r_data   (read_data_0),
    .w_enable (~reset & write_valid),	// difftest/src/main/scala/common/Mem.scala:214:16, :222:30
    .w_index  (write_index),
    .w_data   (write_data_0),
    .w_mask   (64'hFFFFFFFFFFFFFFFF),	// difftest/src/main/scala/common/Mem.scala:197:49, :204:17
    .clock    (clock)
  );
endmodule

