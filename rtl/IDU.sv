// Generated by CIRCT firtool-1.62.0
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

// Standard header to adapt well known macros for prints and assertions.

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

module IDU(	// src/main/scala/nutcore/frontend/IDU.scala:193:7
  input         clock,	// src/main/scala/nutcore/frontend/IDU.scala:193:7
                reset,	// src/main/scala/nutcore/frontend/IDU.scala:193:7
  output        io_in_0_ready,	// src/main/scala/nutcore/frontend/IDU.scala:194:14
  input         io_in_0_valid,	// src/main/scala/nutcore/frontend/IDU.scala:194:14
  input  [63:0] io_in_0_bits_instr,	// src/main/scala/nutcore/frontend/IDU.scala:194:14
  input  [38:0] io_in_0_bits_pc,	// src/main/scala/nutcore/frontend/IDU.scala:194:14
                io_in_0_bits_pnpc,	// src/main/scala/nutcore/frontend/IDU.scala:194:14
  input         io_in_0_bits_exceptionVec_12,	// src/main/scala/nutcore/frontend/IDU.scala:194:14
  input  [3:0]  io_in_0_bits_brIdx,	// src/main/scala/nutcore/frontend/IDU.scala:194:14
  input         io_in_0_bits_crossPageIPFFix,	// src/main/scala/nutcore/frontend/IDU.scala:194:14
                io_out_0_ready,	// src/main/scala/nutcore/frontend/IDU.scala:194:14
  output        io_out_0_valid,	// src/main/scala/nutcore/frontend/IDU.scala:194:14
  output [63:0] io_out_0_bits_cf_instr,	// src/main/scala/nutcore/frontend/IDU.scala:194:14
  output [38:0] io_out_0_bits_cf_pc,	// src/main/scala/nutcore/frontend/IDU.scala:194:14
                io_out_0_bits_cf_pnpc,	// src/main/scala/nutcore/frontend/IDU.scala:194:14
  output        io_out_0_bits_cf_exceptionVec_1,	// src/main/scala/nutcore/frontend/IDU.scala:194:14
                io_out_0_bits_cf_exceptionVec_2,	// src/main/scala/nutcore/frontend/IDU.scala:194:14
                io_out_0_bits_cf_exceptionVec_12,	// src/main/scala/nutcore/frontend/IDU.scala:194:14
                io_out_0_bits_cf_intrVec_0,	// src/main/scala/nutcore/frontend/IDU.scala:194:14
                io_out_0_bits_cf_intrVec_1,	// src/main/scala/nutcore/frontend/IDU.scala:194:14
                io_out_0_bits_cf_intrVec_2,	// src/main/scala/nutcore/frontend/IDU.scala:194:14
                io_out_0_bits_cf_intrVec_3,	// src/main/scala/nutcore/frontend/IDU.scala:194:14
                io_out_0_bits_cf_intrVec_4,	// src/main/scala/nutcore/frontend/IDU.scala:194:14
                io_out_0_bits_cf_intrVec_5,	// src/main/scala/nutcore/frontend/IDU.scala:194:14
                io_out_0_bits_cf_intrVec_6,	// src/main/scala/nutcore/frontend/IDU.scala:194:14
                io_out_0_bits_cf_intrVec_7,	// src/main/scala/nutcore/frontend/IDU.scala:194:14
                io_out_0_bits_cf_intrVec_8,	// src/main/scala/nutcore/frontend/IDU.scala:194:14
                io_out_0_bits_cf_intrVec_9,	// src/main/scala/nutcore/frontend/IDU.scala:194:14
                io_out_0_bits_cf_intrVec_10,	// src/main/scala/nutcore/frontend/IDU.scala:194:14
                io_out_0_bits_cf_intrVec_11,	// src/main/scala/nutcore/frontend/IDU.scala:194:14
  output [3:0]  io_out_0_bits_cf_brIdx,	// src/main/scala/nutcore/frontend/IDU.scala:194:14
  output        io_out_0_bits_cf_crossPageIPFFix,	// src/main/scala/nutcore/frontend/IDU.scala:194:14
                io_out_0_bits_ctrl_src1Type,	// src/main/scala/nutcore/frontend/IDU.scala:194:14
                io_out_0_bits_ctrl_src2Type,	// src/main/scala/nutcore/frontend/IDU.scala:194:14
  output [2:0]  io_out_0_bits_ctrl_fuType,	// src/main/scala/nutcore/frontend/IDU.scala:194:14
  output [6:0]  io_out_0_bits_ctrl_fuOpType,	// src/main/scala/nutcore/frontend/IDU.scala:194:14
  output [4:0]  io_out_0_bits_ctrl_rfSrc1,	// src/main/scala/nutcore/frontend/IDU.scala:194:14
                io_out_0_bits_ctrl_rfSrc2,	// src/main/scala/nutcore/frontend/IDU.scala:194:14
  output        io_out_0_bits_ctrl_rfWen,	// src/main/scala/nutcore/frontend/IDU.scala:194:14
  output [4:0]  io_out_0_bits_ctrl_rfDest,	// src/main/scala/nutcore/frontend/IDU.scala:194:14
  output        io_out_0_bits_ctrl_isNutCoreTrap,	// src/main/scala/nutcore/frontend/IDU.scala:194:14
  output [63:0] io_out_0_bits_data_imm,	// src/main/scala/nutcore/frontend/IDU.scala:194:14
  output        io_out_1_bits_cf_intrVec_0,	// src/main/scala/nutcore/frontend/IDU.scala:194:14
                io_out_1_bits_cf_intrVec_1,	// src/main/scala/nutcore/frontend/IDU.scala:194:14
                io_out_1_bits_cf_intrVec_2,	// src/main/scala/nutcore/frontend/IDU.scala:194:14
                io_out_1_bits_cf_intrVec_3,	// src/main/scala/nutcore/frontend/IDU.scala:194:14
                io_out_1_bits_cf_intrVec_4,	// src/main/scala/nutcore/frontend/IDU.scala:194:14
                io_out_1_bits_cf_intrVec_5,	// src/main/scala/nutcore/frontend/IDU.scala:194:14
                io_out_1_bits_cf_intrVec_6,	// src/main/scala/nutcore/frontend/IDU.scala:194:14
                io_out_1_bits_cf_intrVec_7,	// src/main/scala/nutcore/frontend/IDU.scala:194:14
                io_out_1_bits_cf_intrVec_8,	// src/main/scala/nutcore/frontend/IDU.scala:194:14
                io_out_1_bits_cf_intrVec_9,	// src/main/scala/nutcore/frontend/IDU.scala:194:14
                io_out_1_bits_cf_intrVec_10,	// src/main/scala/nutcore/frontend/IDU.scala:194:14
                io_out_1_bits_cf_intrVec_11,	// src/main/scala/nutcore/frontend/IDU.scala:194:14
                _WIRE__bore,
  input  [11:0] decoder1_intrVec__bore,
                decoder2_intrVec__bore,
  input         decoder1_vmEnable__bore
);

  wire _GEN;	// src/main/scala/nutcore/frontend/IDU.scala:219:35
  Decoder decoder1 (	// src/main/scala/nutcore/frontend/IDU.scala:198:25
    .clock                          (clock),
    .reset                          (reset),
    .io_in_ready                    (io_in_0_ready),
    .io_in_valid                    (io_in_0_valid),
    .io_in_bits_instr               (io_in_0_bits_instr),
    .io_in_bits_pc                  (io_in_0_bits_pc),
    .io_in_bits_pnpc                (io_in_0_bits_pnpc),
    .io_in_bits_exceptionVec_12     (io_in_0_bits_exceptionVec_12),
    .io_in_bits_brIdx               (io_in_0_bits_brIdx),
    .io_in_bits_crossPageIPFFix     (io_in_0_bits_crossPageIPFFix),
    .io_out_ready                   (io_out_0_ready),
    .io_out_valid                   (io_out_0_valid),
    .io_out_bits_cf_instr           (io_out_0_bits_cf_instr),
    .io_out_bits_cf_pc              (io_out_0_bits_cf_pc),
    .io_out_bits_cf_pnpc            (io_out_0_bits_cf_pnpc),
    .io_out_bits_cf_exceptionVec_1  (io_out_0_bits_cf_exceptionVec_1),
    .io_out_bits_cf_exceptionVec_2  (io_out_0_bits_cf_exceptionVec_2),
    .io_out_bits_cf_exceptionVec_12 (io_out_0_bits_cf_exceptionVec_12),
    .io_out_bits_cf_intrVec_0       (io_out_0_bits_cf_intrVec_0),
    .io_out_bits_cf_intrVec_1       (io_out_0_bits_cf_intrVec_1),
    .io_out_bits_cf_intrVec_2       (io_out_0_bits_cf_intrVec_2),
    .io_out_bits_cf_intrVec_3       (io_out_0_bits_cf_intrVec_3),
    .io_out_bits_cf_intrVec_4       (io_out_0_bits_cf_intrVec_4),
    .io_out_bits_cf_intrVec_5       (io_out_0_bits_cf_intrVec_5),
    .io_out_bits_cf_intrVec_6       (io_out_0_bits_cf_intrVec_6),
    .io_out_bits_cf_intrVec_7       (io_out_0_bits_cf_intrVec_7),
    .io_out_bits_cf_intrVec_8       (io_out_0_bits_cf_intrVec_8),
    .io_out_bits_cf_intrVec_9       (io_out_0_bits_cf_intrVec_9),
    .io_out_bits_cf_intrVec_10      (io_out_0_bits_cf_intrVec_10),
    .io_out_bits_cf_intrVec_11      (io_out_0_bits_cf_intrVec_11),
    .io_out_bits_cf_brIdx           (io_out_0_bits_cf_brIdx),
    .io_out_bits_cf_crossPageIPFFix (io_out_0_bits_cf_crossPageIPFFix),
    .io_out_bits_ctrl_src1Type      (io_out_0_bits_ctrl_src1Type),
    .io_out_bits_ctrl_src2Type      (io_out_0_bits_ctrl_src2Type),
    .io_out_bits_ctrl_fuType        (io_out_0_bits_ctrl_fuType),
    .io_out_bits_ctrl_fuOpType      (io_out_0_bits_ctrl_fuOpType),
    .io_out_bits_ctrl_rfSrc1        (io_out_0_bits_ctrl_rfSrc1),
    .io_out_bits_ctrl_rfSrc2        (io_out_0_bits_ctrl_rfSrc2),
    .io_out_bits_ctrl_rfWen         (io_out_0_bits_ctrl_rfWen),
    .io_out_bits_ctrl_rfDest        (io_out_0_bits_ctrl_rfDest),
    .io_out_bits_ctrl_isNutCoreTrap (io_out_0_bits_ctrl_isNutCoreTrap),
    .io_out_bits_data_imm           (io_out_0_bits_data_imm),
    .io_isWFI                       (_GEN),
    .intrVec__bore                  (decoder1_intrVec__bore),
    .vmEnable__bore                 (decoder1_vmEnable__bore)
  );
  Decoder_1 decoder2 (	// src/main/scala/nutcore/frontend/IDU.scala:199:25
    .clock                     (clock),
    .io_out_bits_cf_intrVec_0  (io_out_1_bits_cf_intrVec_0),
    .io_out_bits_cf_intrVec_1  (io_out_1_bits_cf_intrVec_1),
    .io_out_bits_cf_intrVec_2  (io_out_1_bits_cf_intrVec_2),
    .io_out_bits_cf_intrVec_3  (io_out_1_bits_cf_intrVec_3),
    .io_out_bits_cf_intrVec_4  (io_out_1_bits_cf_intrVec_4),
    .io_out_bits_cf_intrVec_5  (io_out_1_bits_cf_intrVec_5),
    .io_out_bits_cf_intrVec_6  (io_out_1_bits_cf_intrVec_6),
    .io_out_bits_cf_intrVec_7  (io_out_1_bits_cf_intrVec_7),
    .io_out_bits_cf_intrVec_8  (io_out_1_bits_cf_intrVec_8),
    .io_out_bits_cf_intrVec_9  (io_out_1_bits_cf_intrVec_9),
    .io_out_bits_cf_intrVec_10 (io_out_1_bits_cf_intrVec_10),
    .io_out_bits_cf_intrVec_11 (io_out_1_bits_cf_intrVec_11),
    .intrVec__bore             (decoder2_intrVec__bore)
  );
  assign _WIRE__bore = _GEN;	// src/main/scala/nutcore/frontend/IDU.scala:193:7, :219:35
endmodule

