// Generated by CIRCT firtool-1.62.0
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

// Standard header to adapt well known macros for prints and assertions.

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

module SRAMTemplateWithArbiter_5(	// src/main/scala/utils/SRAMTemplate.scala:114:7
  input         clock,	// src/main/scala/utils/SRAMTemplate.scala:114:7
                reset,	// src/main/scala/utils/SRAMTemplate.scala:114:7
  output        io_r0_req_ready,	// src/main/scala/utils/SRAMTemplate.scala:116:14
  input         io_r0_req_valid,	// src/main/scala/utils/SRAMTemplate.scala:116:14
  input  [11:0] io_r0_req_bits_setIdx,	// src/main/scala/utils/SRAMTemplate.scala:116:14
  output [63:0] io_r0_resp_data_0_data,	// src/main/scala/utils/SRAMTemplate.scala:116:14
                io_r0_resp_data_1_data,	// src/main/scala/utils/SRAMTemplate.scala:116:14
                io_r0_resp_data_2_data,	// src/main/scala/utils/SRAMTemplate.scala:116:14
                io_r0_resp_data_3_data,	// src/main/scala/utils/SRAMTemplate.scala:116:14
  output        io_r1_req_ready,	// src/main/scala/utils/SRAMTemplate.scala:116:14
  input         io_r1_req_valid,	// src/main/scala/utils/SRAMTemplate.scala:116:14
  input  [11:0] io_r1_req_bits_setIdx,	// src/main/scala/utils/SRAMTemplate.scala:116:14
  output [63:0] io_r1_resp_data_0_data,	// src/main/scala/utils/SRAMTemplate.scala:116:14
                io_r1_resp_data_1_data,	// src/main/scala/utils/SRAMTemplate.scala:116:14
                io_r1_resp_data_2_data,	// src/main/scala/utils/SRAMTemplate.scala:116:14
                io_r1_resp_data_3_data,	// src/main/scala/utils/SRAMTemplate.scala:116:14
  input         io_wreq_valid,	// src/main/scala/utils/SRAMTemplate.scala:116:14
  input  [11:0] io_wreq_bits_setIdx,	// src/main/scala/utils/SRAMTemplate.scala:116:14
  input  [63:0] io_wreq_bits_data_data,	// src/main/scala/utils/SRAMTemplate.scala:116:14
  input  [3:0]  io_wreq_bits_waymask	// src/main/scala/utils/SRAMTemplate.scala:116:14
);

  wire        _readArb_io_in_0_ready;	// src/main/scala/utils/SRAMTemplate.scala:124:23
  wire        _readArb_io_in_1_ready;	// src/main/scala/utils/SRAMTemplate.scala:124:23
  wire        _readArb_io_out_valid;	// src/main/scala/utils/SRAMTemplate.scala:124:23
  wire [11:0] _readArb_io_out_bits_setIdx;	// src/main/scala/utils/SRAMTemplate.scala:124:23
  wire        _ram_io_rreq_ready;	// src/main/scala/utils/SRAMTemplate.scala:121:19
  wire [63:0] _ram_io_rresp_data_0_data;	// src/main/scala/utils/SRAMTemplate.scala:121:19
  wire [63:0] _ram_io_rresp_data_1_data;	// src/main/scala/utils/SRAMTemplate.scala:121:19
  wire [63:0] _ram_io_rresp_data_2_data;	// src/main/scala/utils/SRAMTemplate.scala:121:19
  wire [63:0] _ram_io_rresp_data_3_data;	// src/main/scala/utils/SRAMTemplate.scala:121:19
  reg         REG;	// src/main/scala/utils/SRAMTemplate.scala:130:58
  reg  [63:0] r_0_data;	// src/main/scala/utils/Hold.scala:23:65
  reg  [63:0] r_1_data;	// src/main/scala/utils/Hold.scala:23:65
  reg  [63:0] r_2_data;	// src/main/scala/utils/Hold.scala:23:65
  reg  [63:0] r_3_data;	// src/main/scala/utils/Hold.scala:23:65
  reg         REG_1;	// src/main/scala/utils/SRAMTemplate.scala:130:58
  reg  [63:0] r_1_0_data;	// src/main/scala/utils/Hold.scala:23:65
  reg  [63:0] r_1_1_data;	// src/main/scala/utils/Hold.scala:23:65
  reg  [63:0] r_1_2_data;	// src/main/scala/utils/Hold.scala:23:65
  reg  [63:0] r_1_3_data;	// src/main/scala/utils/Hold.scala:23:65
  always @(posedge clock) begin	// src/main/scala/utils/SRAMTemplate.scala:114:7
    REG <= _readArb_io_in_0_ready & io_r0_req_valid;	// src/main/scala/chisel3/util/Decoupled.scala:51:35, src/main/scala/utils/SRAMTemplate.scala:124:23, :130:58
    REG_1 <= _readArb_io_in_1_ready & io_r1_req_valid;	// src/main/scala/chisel3/util/Decoupled.scala:51:35, src/main/scala/utils/SRAMTemplate.scala:124:23, :130:58
    if (reset) begin	// src/main/scala/utils/SRAMTemplate.scala:114:7
      r_0_data <= 64'h0;	// src/main/scala/utils/Hold.scala:23:{65,81}
      r_1_data <= 64'h0;	// src/main/scala/utils/Hold.scala:23:{65,81}
      r_2_data <= 64'h0;	// src/main/scala/utils/Hold.scala:23:{65,81}
      r_3_data <= 64'h0;	// src/main/scala/utils/Hold.scala:23:{65,81}
      r_1_0_data <= 64'h0;	// src/main/scala/utils/Hold.scala:23:{65,81}
      r_1_1_data <= 64'h0;	// src/main/scala/utils/Hold.scala:23:{65,81}
      r_1_2_data <= 64'h0;	// src/main/scala/utils/Hold.scala:23:{65,81}
      r_1_3_data <= 64'h0;	// src/main/scala/utils/Hold.scala:23:{65,81}
    end
    else begin	// src/main/scala/utils/SRAMTemplate.scala:114:7
      if (REG) begin	// src/main/scala/utils/SRAMTemplate.scala:130:58
        r_0_data <= _ram_io_rresp_data_0_data;	// src/main/scala/utils/Hold.scala:23:65, src/main/scala/utils/SRAMTemplate.scala:121:19
        r_1_data <= _ram_io_rresp_data_1_data;	// src/main/scala/utils/Hold.scala:23:65, src/main/scala/utils/SRAMTemplate.scala:121:19
        r_2_data <= _ram_io_rresp_data_2_data;	// src/main/scala/utils/Hold.scala:23:65, src/main/scala/utils/SRAMTemplate.scala:121:19
        r_3_data <= _ram_io_rresp_data_3_data;	// src/main/scala/utils/Hold.scala:23:65, src/main/scala/utils/SRAMTemplate.scala:121:19
      end
      if (REG_1) begin	// src/main/scala/utils/SRAMTemplate.scala:130:58
        r_1_0_data <= _ram_io_rresp_data_0_data;	// src/main/scala/utils/Hold.scala:23:65, src/main/scala/utils/SRAMTemplate.scala:121:19
        r_1_1_data <= _ram_io_rresp_data_1_data;	// src/main/scala/utils/Hold.scala:23:65, src/main/scala/utils/SRAMTemplate.scala:121:19
        r_1_2_data <= _ram_io_rresp_data_2_data;	// src/main/scala/utils/Hold.scala:23:65, src/main/scala/utils/SRAMTemplate.scala:121:19
        r_1_3_data <= _ram_io_rresp_data_3_data;	// src/main/scala/utils/Hold.scala:23:65, src/main/scala/utils/SRAMTemplate.scala:121:19
      end
    end
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_	// src/main/scala/utils/SRAMTemplate.scala:114:7
    `ifdef FIRRTL_BEFORE_INITIAL	// src/main/scala/utils/SRAMTemplate.scala:114:7
      `FIRRTL_BEFORE_INITIAL	// src/main/scala/utils/SRAMTemplate.scala:114:7
    `endif // FIRRTL_BEFORE_INITIAL
    initial begin	// src/main/scala/utils/SRAMTemplate.scala:114:7
      automatic logic [31:0] _RANDOM[0:16];	// src/main/scala/utils/SRAMTemplate.scala:114:7
      `ifdef INIT_RANDOM_PROLOG_	// src/main/scala/utils/SRAMTemplate.scala:114:7
        `INIT_RANDOM_PROLOG_	// src/main/scala/utils/SRAMTemplate.scala:114:7
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// src/main/scala/utils/SRAMTemplate.scala:114:7
        for (logic [4:0] i = 5'h0; i < 5'h11; i += 5'h1) begin
          _RANDOM[i] = `RANDOM;	// src/main/scala/utils/SRAMTemplate.scala:114:7
        end	// src/main/scala/utils/SRAMTemplate.scala:114:7
        REG = _RANDOM[5'h0][0];	// src/main/scala/utils/SRAMTemplate.scala:114:7, :130:58
        r_0_data = {_RANDOM[5'h0][31:1], _RANDOM[5'h1], _RANDOM[5'h2][0]};	// src/main/scala/utils/Hold.scala:23:65, src/main/scala/utils/SRAMTemplate.scala:114:7, :130:58
        r_1_data = {_RANDOM[5'h2][31:1], _RANDOM[5'h3], _RANDOM[5'h4][0]};	// src/main/scala/utils/Hold.scala:23:65, src/main/scala/utils/SRAMTemplate.scala:114:7
        r_2_data = {_RANDOM[5'h4][31:1], _RANDOM[5'h5], _RANDOM[5'h6][0]};	// src/main/scala/utils/Hold.scala:23:65, src/main/scala/utils/SRAMTemplate.scala:114:7
        r_3_data = {_RANDOM[5'h6][31:1], _RANDOM[5'h7], _RANDOM[5'h8][0]};	// src/main/scala/utils/Hold.scala:23:65, src/main/scala/utils/SRAMTemplate.scala:114:7
        REG_1 = _RANDOM[5'h8][1];	// src/main/scala/utils/Hold.scala:23:65, src/main/scala/utils/SRAMTemplate.scala:114:7, :130:58
        r_1_0_data = {_RANDOM[5'h8][31:2], _RANDOM[5'h9], _RANDOM[5'hA][1:0]};	// src/main/scala/utils/Hold.scala:23:65, src/main/scala/utils/SRAMTemplate.scala:114:7
        r_1_1_data = {_RANDOM[5'hA][31:2], _RANDOM[5'hB], _RANDOM[5'hC][1:0]};	// src/main/scala/utils/Hold.scala:23:65, src/main/scala/utils/SRAMTemplate.scala:114:7
        r_1_2_data = {_RANDOM[5'hC][31:2], _RANDOM[5'hD], _RANDOM[5'hE][1:0]};	// src/main/scala/utils/Hold.scala:23:65, src/main/scala/utils/SRAMTemplate.scala:114:7
        r_1_3_data = {_RANDOM[5'hE][31:2], _RANDOM[5'hF], _RANDOM[5'h10][1:0]};	// src/main/scala/utils/Hold.scala:23:65, src/main/scala/utils/SRAMTemplate.scala:114:7
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// src/main/scala/utils/SRAMTemplate.scala:114:7
      `FIRRTL_AFTER_INITIAL	// src/main/scala/utils/SRAMTemplate.scala:114:7
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  SRAMTemplate_6 ram (	// src/main/scala/utils/SRAMTemplate.scala:121:19
    .clock                   (clock),
    .io_rreq_ready          (_ram_io_rreq_ready),
    .io_rreq_valid          (_readArb_io_out_valid),	// src/main/scala/utils/SRAMTemplate.scala:124:23
    .io_rreq_bits_setIdx    (_readArb_io_out_bits_setIdx),	// src/main/scala/utils/SRAMTemplate.scala:124:23
    .io_rresp_data_0_data   (_ram_io_rresp_data_0_data),
    .io_rresp_data_1_data   (_ram_io_rresp_data_1_data),
    .io_rresp_data_2_data   (_ram_io_rresp_data_2_data),
    .io_rresp_data_3_data   (_ram_io_rresp_data_3_data),
    .io_wreq_valid          (io_wreq_valid),
    .io_wreq_bits_setIdx    (io_wreq_bits_setIdx),
    .io_wreq_bits_data_data (io_wreq_bits_data_data),
    .io_wreq_bits_waymask   (io_wreq_bits_waymask)
  );
  Arbiter2_SRAMBundleA_2 readArb (	// src/main/scala/utils/SRAMTemplate.scala:124:23
    .io_in_0_ready       (_readArb_io_in_0_ready),
    .io_in_0_valid       (io_r0_req_valid),
    .io_in_0_bits_setIdx (io_r0_req_bits_setIdx),
    .io_in_1_ready       (_readArb_io_in_1_ready),
    .io_in_1_valid       (io_r1_req_valid),
    .io_in_1_bits_setIdx (io_r1_req_bits_setIdx),
    .io_out_ready        (_ram_io_rreq_ready),	// src/main/scala/utils/SRAMTemplate.scala:121:19
    .io_out_valid        (_readArb_io_out_valid),
    .io_out_bits_setIdx  (_readArb_io_out_bits_setIdx)
  );
  assign io_r0_req_ready = _readArb_io_in_0_ready;	// src/main/scala/utils/SRAMTemplate.scala:114:7, :124:23
  assign io_r0_resp_data_0_data = REG ? _ram_io_rresp_data_0_data : r_0_data;	// src/main/scala/utils/Hold.scala:23:65, src/main/scala/utils/SRAMTemplate.scala:114:7, :121:19, :130:58
  assign io_r0_resp_data_1_data = REG ? _ram_io_rresp_data_1_data : r_1_data;	// src/main/scala/utils/Hold.scala:23:65, src/main/scala/utils/SRAMTemplate.scala:114:7, :121:19, :130:58
  assign io_r0_resp_data_2_data = REG ? _ram_io_rresp_data_2_data : r_2_data;	// src/main/scala/utils/Hold.scala:23:65, src/main/scala/utils/SRAMTemplate.scala:114:7, :121:19, :130:58
  assign io_r0_resp_data_3_data = REG ? _ram_io_rresp_data_3_data : r_3_data;	// src/main/scala/utils/Hold.scala:23:65, src/main/scala/utils/SRAMTemplate.scala:114:7, :121:19, :130:58
  assign io_r1_req_ready = _readArb_io_in_1_ready;	// src/main/scala/utils/SRAMTemplate.scala:114:7, :124:23
  assign io_r1_resp_data_0_data = REG_1 ? _ram_io_rresp_data_0_data : r_1_0_data;	// src/main/scala/utils/Hold.scala:23:65, src/main/scala/utils/SRAMTemplate.scala:114:7, :121:19, :130:58
  assign io_r1_resp_data_1_data = REG_1 ? _ram_io_rresp_data_1_data : r_1_1_data;	// src/main/scala/utils/Hold.scala:23:65, src/main/scala/utils/SRAMTemplate.scala:114:7, :121:19, :130:58
  assign io_r1_resp_data_2_data = REG_1 ? _ram_io_rresp_data_2_data : r_1_2_data;	// src/main/scala/utils/Hold.scala:23:65, src/main/scala/utils/SRAMTemplate.scala:114:7, :121:19, :130:58
  assign io_r1_resp_data_3_data = REG_1 ? _ram_io_rresp_data_3_data : r_1_3_data;	// src/main/scala/utils/Hold.scala:23:65, src/main/scala/utils/SRAMTemplate.scala:114:7, :121:19, :130:58
endmodule

