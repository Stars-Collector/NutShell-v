// Generated by CIRCT firtool-1.62.0
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

// Standard header to adapt well known macros for prints and assertions.

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

module NaiveRVCAlignBuffer(	// src/main/scala/nutcore/frontend/NaiveIBF.scala:26:7
  input         clock,	// src/main/scala/nutcore/frontend/NaiveIBF.scala:26:7
                reset,	// src/main/scala/nutcore/frontend/NaiveIBF.scala:26:7
  output        io_in_ready,	// src/main/scala/nutcore/frontend/NaiveIBF.scala:27:14
  input         io_in_valid,	// src/main/scala/nutcore/frontend/NaiveIBF.scala:27:14
  input  [63:0] io_in_bits_instr,	// src/main/scala/nutcore/frontend/NaiveIBF.scala:27:14
  input  [38:0] io_in_bits_pc,	// src/main/scala/nutcore/frontend/NaiveIBF.scala:27:14
                io_in_bits_pnpc,	// src/main/scala/nutcore/frontend/NaiveIBF.scala:27:14
  input         io_in_bits_exceptionVec_12,	// src/main/scala/nutcore/frontend/NaiveIBF.scala:27:14
  input  [3:0]  io_in_bits_brIdx,	// src/main/scala/nutcore/frontend/NaiveIBF.scala:27:14
  input         io_out_ready,	// src/main/scala/nutcore/frontend/NaiveIBF.scala:27:14
  output        io_out_valid,	// src/main/scala/nutcore/frontend/NaiveIBF.scala:27:14
  output [63:0] io_out_bits_instr,	// src/main/scala/nutcore/frontend/NaiveIBF.scala:27:14
  output [38:0] io_out_bits_pc,	// src/main/scala/nutcore/frontend/NaiveIBF.scala:27:14
                io_out_bits_pnpc,	// src/main/scala/nutcore/frontend/NaiveIBF.scala:27:14
  output        io_out_bits_exceptionVec_12,	// src/main/scala/nutcore/frontend/NaiveIBF.scala:27:14
  output [3:0]  io_out_bits_brIdx,	// src/main/scala/nutcore/frontend/NaiveIBF.scala:27:14
  output        io_out_bits_crossPageIPFFix,	// src/main/scala/nutcore/frontend/NaiveIBF.scala:27:14
  input         io_flush	// src/main/scala/nutcore/frontend/NaiveIBF.scala:27:14
);

  wire [38:0]      pcOut;	// src/main/scala/nutcore/frontend/NaiveIBF.scala:98:18, :102:15
  wire [31:0]      instr;	// src/main/scala/nutcore/frontend/NaiveIBF.scala:90:15
  wire [63:0]      _LogPerfHelper_timer;	// difftest/src/main/scala/common/LogPerfControl.scala:60:79
  wire             _LogPerfHelper_logEnable;	// difftest/src/main/scala/common/LogPerfControl.scala:60:79
  reg  [1:0]       state;	// src/main/scala/nutcore/frontend/NaiveIBF.scala:39:22
  reg  [2:0]       pcOffsetR;	// src/main/scala/nutcore/frontend/NaiveIBF.scala:40:26
  wire [2:0]       pcOffset = (|state) ? pcOffsetR : io_in_bits_pc[2:0];	// src/main/scala/nutcore/frontend/NaiveIBF.scala:39:22, :40:26, :41:{21,28,53}
  wire             _rvcNext_T_5 = pcOffset == 3'h4;	// src/main/scala/nutcore/frontend/NaiveIBF.scala:26:7, :41:21, :48:72
  wire             _rvcForceLoadNext_T = pcOffset == 3'h2;	// src/main/scala/nutcore/frontend/NaiveIBF.scala:41:21, :48:116, :107:38
  wire             _rvcSpecialJump_T = pcOffset == 3'h6;	// src/main/scala/nutcore/frontend/NaiveIBF.scala:41:21, :48:159
  wire             rvcFinish =
    ~(|pcOffset) & ((&(instr[1:0])) | io_in_bits_brIdx[0]) | _rvcNext_T_5
    & ((&(instr[1:0])) | io_in_bits_brIdx[0]) | _rvcForceLoadNext_T
    & (~(&(instr[1:0])) | io_in_bits_brIdx[1]) | _rvcSpecialJump_T & ~(&(instr[1:0]));	// src/main/scala/nutcore/frontend/NaiveIBF.scala:34:{20,26}, :41:21, :48:{28,36,47,55,72,80,91,116,124,134,142,147,159,167}, :90:15
  wire             rvcNext =
    ~(|pcOffset) & ~(&(instr[1:0])) & ~(io_in_bits_brIdx[0]) | _rvcNext_T_5
    & ~(&(instr[1:0])) & ~(io_in_bits_brIdx[0]) | _rvcForceLoadNext_T & (&(instr[1:0]))
    & ~(io_in_bits_brIdx[1]);	// src/main/scala/nutcore/frontend/NaiveIBF.scala:34:{20,26}, :41:21, :48:{28,55,72,116,142}, :51:{34,47,78,91,102,132,135}, :90:15
  wire             rvcSpecial =
    _rvcSpecialJump_T & (&(instr[1:0])) & ~(io_in_bits_brIdx[2]);	// src/main/scala/nutcore/frontend/NaiveIBF.scala:34:{20,26}, :48:159, :52:{47,50,56}, :90:15
  wire             rvcSpecialJump =
    _rvcSpecialJump_T & (&(instr[1:0])) & io_in_bits_brIdx[2];	// src/main/scala/nutcore/frontend/NaiveIBF.scala:34:{20,26}, :48:159, :52:56, :53:51, :90:15
  wire             _loadNextInstline_T_1 = state == 2'h1;	// src/main/scala/nutcore/frontend/NaiveIBF.scala:26:7, :39:22, :57:45
  `ifndef SYNTHESIS	// src/main/scala/utils/Debug.scala:49:26
    always @(posedge clock) begin	// src/main/scala/utils/Debug.scala:49:26
      automatic logic flushIFU;	// src/main/scala/nutcore/frontend/NaiveIBF.scala:57:87
      flushIFU =
        (~(|state) | _loadNextInstline_T_1) & rvcSpecial & io_in_valid
        & ~(io_in_bits_brIdx[3]);	// src/main/scala/nutcore/frontend/NaiveIBF.scala:39:22, :41:28, :52:47, :54:24, :57:{36,45,87,90}
      if ((`PRINTF_COND_) & flushIFU & _LogPerfHelper_logEnable & ~reset) begin	// difftest/src/main/scala/common/LogPerfControl.scala:60:79, src/main/scala/nutcore/frontend/NaiveIBF.scala:57:87, src/main/scala/utils/Debug.scala:49:26, :50:15
        $fwrite(32'h80000002, "[%d] NaiveRVCAlignBuffer: ", _LogPerfHelper_timer);	// difftest/src/main/scala/common/LogPerfControl.scala:60:79, src/main/scala/utils/Debug.scala:49:26
        $fwrite(32'h80000002, "flushIFU at pc %x offset %x\n", io_in_bits_pc, pcOffset);	// src/main/scala/nutcore/frontend/NaiveIBF.scala:41:21, src/main/scala/utils/Debug.scala:49:26, :50:15
      end
      if (~reset & flushIFU) begin	// src/main/scala/nutcore/frontend/NaiveIBF.scala:57:87, :59:9, src/main/scala/utils/Debug.scala:49:26
        if (`ASSERT_VERBOSE_COND_)	// src/main/scala/nutcore/frontend/NaiveIBF.scala:59:9
          $error("Assertion failed\n    at NaiveIBF.scala:59 assert(!flushIFU)\n");	// src/main/scala/nutcore/frontend/NaiveIBF.scala:59:9
        if (`STOP_COND_)	// src/main/scala/nutcore/frontend/NaiveIBF.scala:59:9
          $fatal;	// src/main/scala/nutcore/frontend/NaiveIBF.scala:59:9
      end
    end // always @(posedge)
  `endif // not def SYNTHESIS
  reg  [38:0]      specialPCR;	// src/main/scala/nutcore/frontend/NaiveIBF.scala:64:23
  reg  [38:0]      specialNPCR;	// src/main/scala/nutcore/frontend/NaiveIBF.scala:65:24
  reg  [15:0]      specialInstR;	// src/main/scala/nutcore/frontend/NaiveIBF.scala:66:25
  reg              specialIPFR;	// src/main/scala/nutcore/frontend/NaiveIBF.scala:67:28
  wire             rvcForceLoadNext =
    _rvcForceLoadNext_T & (&(instr[1:0])) & io_in_bits_pnpc[2:0] == 3'h4
    & ~(io_in_bits_brIdx[1]);	// src/main/scala/nutcore/frontend/NaiveIBF.scala:26:7, :34:{20,26}, :48:{116,142}, :69:{72,78,86,89}, :90:15
  wire             _io_out_bits_crossPageIPFFix_T_1 = state == 2'h2;	// src/main/scala/nutcore/frontend/NaiveIBF.scala:26:7, :39:22, :90:23
  assign instr =
    _io_out_bits_crossPageIPFFix_T_1 | (&state)
      ? {io_in_bits_instr[15:0], specialInstR}
      : ((|pcOffset) ? 32'h0 : io_in_bits_instr[31:0])
        | (pcOffset == 3'h2 ? io_in_bits_instr[47:16] : 32'h0)
        | (pcOffset == 3'h4 ? io_in_bits_instr[63:32] : 32'h0)
        | (pcOffset == 3'h6 ? {16'h0, io_in_bits_instr[63:48]} : 32'h0);	// src/main/scala/chisel3/util/Mux.scala:30:73, src/main/scala/nutcore/frontend/NaiveIBF.scala:26:7, :39:22, :41:21, :42:19, :48:{28,159}, :66:25, :90:{15,23,38,47,73,80}, :91:23, :92:23, :93:23, :94:23, :107:38, src/main/scala/utils/LookupTree.scala:24:34
  wire             _GEN = state == 2'h1;	// src/main/scala/nutcore/frontend/NaiveIBF.scala:26:7, :39:22, :98:18
  wire             _GEN_0 = state == 2'h2;	// src/main/scala/nutcore/frontend/NaiveIBF.scala:26:7, :39:22, :98:18
  wire [3:0][38:0] _GEN_1 =
    {{specialPCR}, {specialPCR}, {{io_in_bits_pc[38:3], pcOffsetR}}, {39'h0}};	// src/main/scala/nutcore/frontend/NaiveIBF.scala:40:26, :62:23, :64:23, :68:37, :98:18, :126:{15,21}, :149:15, :161:15
  wire [38:0]      _GEN_2 = _GEN_1[state];	// src/main/scala/nutcore/frontend/NaiveIBF.scala:39:22, :62:23, :98:18, :126:15, :149:15, :161:15
  assign pcOut = (|state) ? _GEN_2 : io_in_bits_pc;	// src/main/scala/nutcore/frontend/NaiveIBF.scala:39:22, :41:28, :98:18, :102:15, :126:15
  wire [3:0][38:0] _GEN_3 =
    {{specialNPCR},
     {specialPCR + 39'h4},
     {rvcFinish ? io_in_bits_pnpc : (&(instr[1:0])) ? pcOut + 39'h4 : pcOut + 39'h2},
     {39'h0}};	// src/main/scala/nutcore/frontend/NaiveIBF.scala:34:{20,26}, :48:147, :62:23, :63:25, :64:23, :65:24, :90:15, :98:18, :102:15, :103:{76,95}, :127:{17,23,55,68,79}, :150:{17,31}, :162:17
  wire [38:0]      pnpcOut =
    (|state)
      ? _GEN_3[state]
      : rvcFinish
          ? io_in_bits_pnpc
          : (&(instr[1:0])) ? io_in_bits_pc + 39'h4 : io_in_bits_pc + 39'h2;	// src/main/scala/nutcore/frontend/NaiveIBF.scala:34:{20,26}, :39:22, :41:28, :48:147, :63:25, :90:15, :98:18, :103:{17,23,55,76,95}, :127:17, :150:17, :162:17
  wire             io_out_valid_0 =
    io_in_valid
    & ((|state)
         ? (_GEN ? rvcFinish | rvcNext : (_GEN_0 | (&state)) & io_in_valid)
         : rvcFinish | rvcNext);	// src/main/scala/nutcore/frontend/NaiveIBF.scala:39:22, :41:28, :44:23, :48:147, :51:102, :62:23, :98:18, :100:{15,28}, :124:{15,28}, :149:15, :152:15, :161:15, :164:15, :187:31
  always @(posedge clock) begin	// src/main/scala/nutcore/frontend/NaiveIBF.scala:26:7
    automatic logic _GEN_4;	// src/main/scala/nutcore/frontend/NaiveIBF.scala:109:25
    automatic logic _GEN_5;	// src/main/scala/nutcore/frontend/NaiveIBF.scala:115:29
    automatic logic _GEN_6;	// src/main/scala/nutcore/frontend/NaiveIBF.scala:64:23, :98:18, :109:40, :111:22, :115:44, :117:22, :133:40, :135:22, :139:44, :141:22
    automatic logic _GEN_7;	// src/main/scala/nutcore/frontend/NaiveIBF.scala:64:23, :97:18, :98:18
    _GEN_4 = rvcSpecial & io_in_valid;	// src/main/scala/nutcore/frontend/NaiveIBF.scala:52:47, :109:25
    _GEN_5 = rvcSpecialJump & io_in_valid;	// src/main/scala/nutcore/frontend/NaiveIBF.scala:53:51, :115:29
    _GEN_6 = ~(|state) | _GEN;	// src/main/scala/nutcore/frontend/NaiveIBF.scala:39:22, :41:28, :64:23, :98:18, :109:40, :111:22, :115:44, :117:22, :133:40, :135:22, :139:44, :141:22
    _GEN_7 = io_flush | ~(_GEN_6 & (_GEN_5 | _GEN_4));	// src/main/scala/nutcore/frontend/NaiveIBF.scala:64:23, :97:18, :98:18, :109:{25,40}, :111:22, :115:{29,44}, :117:22, :133:40, :135:22, :139:44, :141:22
    if (reset) begin	// src/main/scala/nutcore/frontend/NaiveIBF.scala:26:7
      state <= 2'h0;	// src/main/scala/nutcore/frontend/NaiveIBF.scala:26:7, :39:22
      pcOffsetR <= 3'h0;	// src/main/scala/nutcore/frontend/NaiveIBF.scala:26:7, :40:26
      specialIPFR <= 1'h0;	// src/main/scala/nutcore/frontend/NaiveIBF.scala:40:26, :67:28
    end
    else begin	// src/main/scala/nutcore/frontend/NaiveIBF.scala:26:7
      if (io_flush)	// src/main/scala/nutcore/frontend/NaiveIBF.scala:27:14
        state <= 2'h0;	// src/main/scala/nutcore/frontend/NaiveIBF.scala:26:7, :39:22
      else begin	// src/main/scala/nutcore/frontend/NaiveIBF.scala:27:14
        automatic logic _GEN_8;	// src/main/scala/chisel3/util/Decoupled.scala:51:35
        automatic logic _GEN_9;	// src/main/scala/nutcore/frontend/NaiveIBF.scala:105:26
        _GEN_8 = io_out_ready & io_out_valid_0;	// src/main/scala/chisel3/util/Decoupled.scala:51:35, src/main/scala/nutcore/frontend/NaiveIBF.scala:187:31
        _GEN_9 = _GEN_8 & rvcNext;	// src/main/scala/chisel3/util/Decoupled.scala:51:35, src/main/scala/nutcore/frontend/NaiveIBF.scala:51:102, :105:26
        if (_GEN_6) begin	// src/main/scala/nutcore/frontend/NaiveIBF.scala:64:23, :98:18, :109:40, :111:22, :115:44, :117:22, :133:40, :135:22, :139:44, :141:22
          if (_GEN_5)	// src/main/scala/nutcore/frontend/NaiveIBF.scala:115:29
            state <= 2'h3;	// src/main/scala/nutcore/frontend/NaiveIBF.scala:26:7, :39:22
          else if (_GEN_4)	// src/main/scala/nutcore/frontend/NaiveIBF.scala:109:25
            state <= 2'h2;	// src/main/scala/nutcore/frontend/NaiveIBF.scala:26:7, :39:22
          else if (_GEN_9)	// src/main/scala/nutcore/frontend/NaiveIBF.scala:105:26
            state <= 2'h1;	// src/main/scala/nutcore/frontend/NaiveIBF.scala:26:7, :39:22
          else if (_GEN_8 & rvcFinish)	// src/main/scala/chisel3/util/Decoupled.scala:51:35, src/main/scala/nutcore/frontend/NaiveIBF.scala:48:147, :104:26
            state <= 2'h0;	// src/main/scala/nutcore/frontend/NaiveIBF.scala:26:7, :39:22
        end
        else if (_GEN_0) begin	// src/main/scala/nutcore/frontend/NaiveIBF.scala:98:18
          if (_GEN_8)	// src/main/scala/chisel3/util/Decoupled.scala:51:35
            state <= 2'h1;	// src/main/scala/nutcore/frontend/NaiveIBF.scala:26:7, :39:22
        end
        else if ((&state) & _GEN_8)	// src/main/scala/chisel3/util/Decoupled.scala:51:35, src/main/scala/nutcore/frontend/NaiveIBF.scala:39:22, :98:18, :166:26, :167:17
          state <= 2'h0;	// src/main/scala/nutcore/frontend/NaiveIBF.scala:26:7, :39:22
        if (|state) begin	// src/main/scala/nutcore/frontend/NaiveIBF.scala:39:22, :41:28
          if (_GEN) begin	// src/main/scala/nutcore/frontend/NaiveIBF.scala:98:18
            if (_GEN_9)	// src/main/scala/nutcore/frontend/NaiveIBF.scala:105:26
              pcOffsetR <= pcOffset + ((&(instr[1:0])) ? 3'h4 : 3'h2);	// src/main/scala/nutcore/frontend/NaiveIBF.scala:26:7, :34:{20,26}, :40:26, :41:21, :90:15, :107:38, :131:{33,38}
          end
          else if (_GEN_0 & _GEN_8)	// src/main/scala/chisel3/util/Decoupled.scala:51:35, src/main/scala/nutcore/frontend/NaiveIBF.scala:40:26, :98:18, :154:26, :156:21
            pcOffsetR <= 3'h2;	// src/main/scala/nutcore/frontend/NaiveIBF.scala:40:26, :107:38
        end
        else if (_GEN_9)	// src/main/scala/nutcore/frontend/NaiveIBF.scala:105:26
          pcOffsetR <= pcOffset + ((&(instr[1:0])) ? 3'h4 : 3'h2);	// src/main/scala/nutcore/frontend/NaiveIBF.scala:26:7, :34:{20,26}, :40:26, :41:21, :90:15, :107:{33,38}
      end
      if (_GEN_7) begin	// src/main/scala/nutcore/frontend/NaiveIBF.scala:64:23, :67:28, :97:18, :98:18
      end
      else	// src/main/scala/nutcore/frontend/NaiveIBF.scala:67:28, :97:18, :98:18
        specialIPFR <= io_in_bits_exceptionVec_12;	// src/main/scala/nutcore/frontend/NaiveIBF.scala:67:28
    end
    if (_GEN_7) begin	// src/main/scala/nutcore/frontend/NaiveIBF.scala:64:23, :97:18, :98:18
    end
    else if (|state)	// src/main/scala/nutcore/frontend/NaiveIBF.scala:39:22, :41:28
      specialPCR <= _GEN_2;	// src/main/scala/nutcore/frontend/NaiveIBF.scala:64:23, :98:18, :126:15
    else	// src/main/scala/nutcore/frontend/NaiveIBF.scala:41:28
      specialPCR <= io_in_bits_pc;	// src/main/scala/nutcore/frontend/NaiveIBF.scala:64:23
    if (io_flush | ~(_GEN_6 & _GEN_5)) begin	// src/main/scala/nutcore/frontend/NaiveIBF.scala:64:23, :65:24, :97:18, :98:18, :109:40, :111:22, :115:{29,44}, :117:22, :118:23, :133:40, :135:22, :139:44, :141:22, :142:23
    end
    else	// src/main/scala/nutcore/frontend/NaiveIBF.scala:65:24, :97:18, :98:18
      specialNPCR <= io_in_bits_pnpc;	// src/main/scala/nutcore/frontend/NaiveIBF.scala:65:24
    if (io_flush) begin	// src/main/scala/nutcore/frontend/NaiveIBF.scala:27:14
    end
    else if (|state) begin	// src/main/scala/nutcore/frontend/NaiveIBF.scala:39:22, :41:28
      if (_GEN) begin	// src/main/scala/nutcore/frontend/NaiveIBF.scala:98:18
        if (_GEN_5)	// src/main/scala/nutcore/frontend/NaiveIBF.scala:115:29
          specialInstR <= io_in_bits_instr[63:48];	// src/main/scala/nutcore/frontend/NaiveIBF.scala:66:25, :143:43
        else if (_GEN_4)	// src/main/scala/nutcore/frontend/NaiveIBF.scala:109:25
          specialInstR <= io_in_bits_instr[63:48];	// src/main/scala/nutcore/frontend/NaiveIBF.scala:66:25, :136:43
      end
    end
    else if (_GEN_5)	// src/main/scala/nutcore/frontend/NaiveIBF.scala:115:29
      specialInstR <= io_in_bits_instr[63:48];	// src/main/scala/nutcore/frontend/NaiveIBF.scala:66:25, :119:43
    else if (_GEN_4)	// src/main/scala/nutcore/frontend/NaiveIBF.scala:109:25
      specialInstR <= io_in_bits_instr[63:48];	// src/main/scala/nutcore/frontend/NaiveIBF.scala:66:25, :112:43
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_	// src/main/scala/nutcore/frontend/NaiveIBF.scala:26:7
    `ifdef FIRRTL_BEFORE_INITIAL	// src/main/scala/nutcore/frontend/NaiveIBF.scala:26:7
      `FIRRTL_BEFORE_INITIAL	// src/main/scala/nutcore/frontend/NaiveIBF.scala:26:7
    `endif // FIRRTL_BEFORE_INITIAL
    initial begin	// src/main/scala/nutcore/frontend/NaiveIBF.scala:26:7
      automatic logic [31:0] _RANDOM[0:3];	// src/main/scala/nutcore/frontend/NaiveIBF.scala:26:7
      `ifdef INIT_RANDOM_PROLOG_	// src/main/scala/nutcore/frontend/NaiveIBF.scala:26:7
        `INIT_RANDOM_PROLOG_	// src/main/scala/nutcore/frontend/NaiveIBF.scala:26:7
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// src/main/scala/nutcore/frontend/NaiveIBF.scala:26:7
        for (logic [2:0] i = 3'h0; i < 3'h4; i += 3'h1) begin
          _RANDOM[i[1:0]] = `RANDOM;	// src/main/scala/nutcore/frontend/NaiveIBF.scala:26:7
        end	// src/main/scala/nutcore/frontend/NaiveIBF.scala:26:7
        state = _RANDOM[2'h0][1:0];	// src/main/scala/nutcore/frontend/NaiveIBF.scala:26:7, :39:22
        pcOffsetR = _RANDOM[2'h0][4:2];	// src/main/scala/nutcore/frontend/NaiveIBF.scala:26:7, :39:22, :40:26
        specialPCR = {_RANDOM[2'h0][31:5], _RANDOM[2'h1][11:0]};	// src/main/scala/nutcore/frontend/NaiveIBF.scala:26:7, :39:22, :64:23
        specialNPCR = {_RANDOM[2'h1][31:12], _RANDOM[2'h2][18:0]};	// src/main/scala/nutcore/frontend/NaiveIBF.scala:26:7, :64:23, :65:24
        specialInstR = {_RANDOM[2'h2][31:19], _RANDOM[2'h3][2:0]};	// src/main/scala/nutcore/frontend/NaiveIBF.scala:26:7, :65:24, :66:25
        specialIPFR = _RANDOM[2'h3][3];	// src/main/scala/nutcore/frontend/NaiveIBF.scala:26:7, :66:25, :67:28
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// src/main/scala/nutcore/frontend/NaiveIBF.scala:26:7
      `FIRRTL_AFTER_INITIAL	// src/main/scala/nutcore/frontend/NaiveIBF.scala:26:7
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  LogPerfHelper LogPerfHelper (	// difftest/src/main/scala/common/LogPerfControl.scala:60:79
    .timer     (_LogPerfHelper_timer),
    .logEnable (_LogPerfHelper_logEnable),
    .clean     (/* unused */),
    .dump      (/* unused */)
  );
  assign io_in_ready =
    ~io_in_valid | io_out_ready & io_out_valid_0
    & ((|state)
         ? (_GEN ? rvcFinish | rvcForceLoadNext : ~_GEN_0 & (&state))
         : rvcFinish | rvcForceLoadNext) | (~(|state) | _loadNextInstline_T_1)
    & (rvcSpecial | rvcSpecialJump) & io_in_valid & io_in_bits_brIdx[3];	// src/main/scala/nutcore/frontend/NaiveIBF.scala:26:7, :39:22, :41:28, :48:147, :52:47, :53:51, :54:24, :57:45, :60:{44,81,115}, :69:86, :98:18, :101:{15,28}, :125:{15,28}, :153:15, :187:31, :188:{19,48,58}
  assign io_out_valid = io_out_valid_0;	// src/main/scala/nutcore/frontend/NaiveIBF.scala:26:7, :187:31
  assign io_out_bits_instr = {32'h0, instr};	// src/main/scala/chisel3/util/Mux.scala:30:73, src/main/scala/nutcore/frontend/NaiveIBF.scala:26:7, :90:15, :184:21
  assign io_out_bits_pc = pcOut;	// src/main/scala/nutcore/frontend/NaiveIBF.scala:26:7, :98:18, :102:15
  assign io_out_bits_pnpc = pnpcOut;	// src/main/scala/nutcore/frontend/NaiveIBF.scala:26:7, :98:18, :103:17
  assign io_out_bits_exceptionVec_12 =
    io_in_bits_exceptionVec_12 | specialIPFR
    & ((&state) | _io_out_bits_crossPageIPFFix_T_1);	// src/main/scala/nutcore/frontend/NaiveIBF.scala:26:7, :39:22, :67:28, :90:{23,47}, :191:{87,102,133}
  assign io_out_bits_brIdx =
    {3'h0,
     ~(pnpcOut == pcOut + 39'h4 & (&(instr[1:0])) | pnpcOut == pcOut + 39'h2
       & ~(&(instr[1:0])))};	// src/main/scala/nutcore/frontend/NaiveIBF.scala:26:7, :34:{20,26}, :40:26, :90:15, :98:18, :102:15, :103:{17,76,95}, :185:{21,27,37,46,51,62,74,83,88}, src/main/scala/utils/Debug.scala:49:26
  assign io_out_bits_crossPageIPFFix =
    io_in_bits_exceptionVec_12 & ((&state) | _io_out_bits_crossPageIPFFix_T_1)
    & ~specialIPFR;	// src/main/scala/nutcore/frontend/NaiveIBF.scala:26:7, :39:22, :67:28, :90:{23,47}, :192:{105,130,133}
endmodule

