// Generated by CIRCT firtool-1.62.0
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

// Standard header to adapt well known macros for prints and assertions.

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

module AtomALU(	// src/main/scala/nutcore/backend/fu/LSU.scala:170:7
  input  [63:0] io_src1,	// src/main/scala/nutcore/backend/fu/LSU.scala:171:14
                io_src2,	// src/main/scala/nutcore/backend/fu/LSU.scala:171:14
  input  [6:0]  io_func,	// src/main/scala/nutcore/backend/fu/LSU.scala:171:14
  input         io_isWordOp,	// src/main/scala/nutcore/backend/fu/LSU.scala:171:14
  output [63:0] io_result	// src/main/scala/nutcore/backend/fu/LSU.scala:171:14
);

  wire [64:0] _adderRes_T_3 =
    {1'h0, io_src1} + {1'h0, io_src2 ^ {64{~(io_func[6])}}} + {64'h0, ~(io_func[6])};	// src/main/scala/nutcore/backend/fu/LSU.scala:53:31, :184:20, :185:{24,33,39,60}
  wire [63:0] xorRes = io_src1 ^ io_src2;	// src/main/scala/nutcore/backend/fu/LSU.scala:186:21
  wire        slt = xorRes[63] ^ ~(_adderRes_T_3[64]);	// src/main/scala/nutcore/backend/fu/LSU.scala:185:60, :186:21, :187:23, :188:{19,28}
  wire [63:0] res =
    io_func[5:0] == 6'h32
      ? (_adderRes_T_3[64] ? io_src1 : io_src2)
      : io_func[5:0] == 6'h31
          ? (_adderRes_T_3[64] ? io_src2 : io_src1)
          : io_func[5:0] == 6'h30
              ? (slt ? io_src2 : io_src1)
              : io_func[5:0] == 6'h37
                  ? (slt ? io_src1 : io_src2)
                  : io_func[5:0] == 6'h26
                      ? io_src1 | io_src2
                      : io_func[5:0] == 6'h25
                          ? io_src1 & io_src2
                          : io_func[5:0] == 6'h24
                              ? xorRes
                              : io_func[5:0] == 6'h22 ? io_src2 : _adderRes_T_3[63:0];	// src/main/scala/nutcore/backend/fu/LSU.scala:185:60, :186:21, :187:23, :188:28, :190:35, :194:32, :195:32, :196:29, :197:29, :198:29, :199:29, src/main/scala/utils/LookupTree.scala:29:28
  assign io_result = io_isWordOp ? {{32{res[31]}}, res[31:0]} : res;	// src/main/scala/nutcore/backend/fu/LSU.scala:170:7, :202:{20,45}, src/main/scala/utils/BitUtils.scala:41:20, :42:{41,46}, src/main/scala/utils/LookupTree.scala:29:28
endmodule

