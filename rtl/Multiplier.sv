// Generated by CIRCT firtool-1.62.0
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

// Standard header to adapt well known macros for prints and assertions.

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

module Multiplier(	// src/main/scala/nutcore/backend/fu/MDU.scala:52:7
  input          clock,	// src/main/scala/nutcore/backend/fu/MDU.scala:52:7
                 reset,	// src/main/scala/nutcore/backend/fu/MDU.scala:52:7
  output         io_in_ready,	// src/main/scala/nutcore/backend/fu/MDU.scala:53:14
  input          io_in_valid,	// src/main/scala/nutcore/backend/fu/MDU.scala:53:14
  input  [64:0]  io_in_bits_0,	// src/main/scala/nutcore/backend/fu/MDU.scala:53:14
                 io_in_bits_1,	// src/main/scala/nutcore/backend/fu/MDU.scala:53:14
  output         io_out_valid,	// src/main/scala/nutcore/backend/fu/MDU.scala:53:14
  output [129:0] io_out_bits	// src/main/scala/nutcore/backend/fu/MDU.scala:53:14
);

  reg [64:0]  mulRes_REG;	// src/main/scala/nutcore/backend/fu/MDU.scala:56:43
  reg [64:0]  mulRes_REG_1;	// src/main/scala/nutcore/backend/fu/MDU.scala:56:43
  reg [129:0] io_out_bits_REG;	// src/main/scala/nutcore/backend/fu/MDU.scala:57:60
  reg [129:0] io_out_bits_REG_1;	// src/main/scala/nutcore/backend/fu/MDU.scala:57:52
  reg [129:0] io_out_bits_REG_2;	// src/main/scala/nutcore/backend/fu/MDU.scala:57:44
  reg         io_out_valid_REG;	// src/main/scala/nutcore/backend/fu/MDU.scala:56:43
  reg         io_out_valid_REG_1;	// src/main/scala/nutcore/backend/fu/MDU.scala:57:60
  reg         io_out_valid_REG_2;	// src/main/scala/nutcore/backend/fu/MDU.scala:57:52
  reg         io_out_valid_REG_3;	// src/main/scala/nutcore/backend/fu/MDU.scala:57:44
  reg         busy;	// src/main/scala/nutcore/backend/fu/MDU.scala:62:21
  always @(posedge clock) begin	// src/main/scala/nutcore/backend/fu/MDU.scala:52:7
    mulRes_REG <= io_in_bits_0;	// src/main/scala/nutcore/backend/fu/MDU.scala:56:43
    mulRes_REG_1 <= io_in_bits_1;	// src/main/scala/nutcore/backend/fu/MDU.scala:56:43
    io_out_bits_REG <=
      {{65{mulRes_REG[64]}}, mulRes_REG} * {{65{mulRes_REG_1[64]}}, mulRes_REG_1};	// src/main/scala/nutcore/backend/fu/MDU.scala:56:43, :57:60, :58:49
    io_out_bits_REG_1 <= io_out_bits_REG;	// src/main/scala/nutcore/backend/fu/MDU.scala:57:{52,60}
    io_out_bits_REG_2 <= io_out_bits_REG_1;	// src/main/scala/nutcore/backend/fu/MDU.scala:57:{44,52}
    io_out_valid_REG <= ~busy & io_in_valid;	// src/main/scala/chisel3/util/Decoupled.scala:51:35, src/main/scala/nutcore/backend/fu/MDU.scala:56:43, :62:21, :63:24
    io_out_valid_REG_1 <= io_out_valid_REG;	// src/main/scala/nutcore/backend/fu/MDU.scala:56:43, :57:60
    io_out_valid_REG_2 <= io_out_valid_REG_1;	// src/main/scala/nutcore/backend/fu/MDU.scala:57:{52,60}
    io_out_valid_REG_3 <= io_out_valid_REG_2;	// src/main/scala/nutcore/backend/fu/MDU.scala:57:{44,52}
    if (reset)	// src/main/scala/nutcore/backend/fu/MDU.scala:52:7
      busy <= 1'h0;	// src/main/scala/nutcore/backend/fu/MDU.scala:62:21
    else	// src/main/scala/nutcore/backend/fu/MDU.scala:52:7
      busy <= ~io_out_valid_REG_3 & (io_in_valid & ~busy | busy);	// src/main/scala/nutcore/backend/fu/MDU.scala:57:44, :62:21, :63:{21,24,31,38}, :64:{23,30}
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_	// src/main/scala/nutcore/backend/fu/MDU.scala:52:7
    `ifdef FIRRTL_BEFORE_INITIAL	// src/main/scala/nutcore/backend/fu/MDU.scala:52:7
      `FIRRTL_BEFORE_INITIAL	// src/main/scala/nutcore/backend/fu/MDU.scala:52:7
    `endif // FIRRTL_BEFORE_INITIAL
    initial begin	// src/main/scala/nutcore/backend/fu/MDU.scala:52:7
      automatic logic [31:0] _RANDOM[0:16];	// src/main/scala/nutcore/backend/fu/MDU.scala:52:7
      `ifdef INIT_RANDOM_PROLOG_	// src/main/scala/nutcore/backend/fu/MDU.scala:52:7
        `INIT_RANDOM_PROLOG_	// src/main/scala/nutcore/backend/fu/MDU.scala:52:7
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// src/main/scala/nutcore/backend/fu/MDU.scala:52:7
        for (logic [4:0] i = 5'h0; i < 5'h11; i += 5'h1) begin
          _RANDOM[i] = `RANDOM;	// src/main/scala/nutcore/backend/fu/MDU.scala:52:7
        end	// src/main/scala/nutcore/backend/fu/MDU.scala:52:7
        mulRes_REG = {_RANDOM[5'h0], _RANDOM[5'h1], _RANDOM[5'h2][0]};	// src/main/scala/nutcore/backend/fu/MDU.scala:52:7, :56:43
        mulRes_REG_1 = {_RANDOM[5'h2][31:1], _RANDOM[5'h3], _RANDOM[5'h4][1:0]};	// src/main/scala/nutcore/backend/fu/MDU.scala:52:7, :56:43
        io_out_bits_REG =
          {_RANDOM[5'h4][31:2],
           _RANDOM[5'h5],
           _RANDOM[5'h6],
           _RANDOM[5'h7],
           _RANDOM[5'h8][3:0]};	// src/main/scala/nutcore/backend/fu/MDU.scala:52:7, :56:43, :57:60
        io_out_bits_REG_1 =
          {_RANDOM[5'h8][31:4],
           _RANDOM[5'h9],
           _RANDOM[5'hA],
           _RANDOM[5'hB],
           _RANDOM[5'hC][5:0]};	// src/main/scala/nutcore/backend/fu/MDU.scala:52:7, :57:{52,60}
        io_out_bits_REG_2 =
          {_RANDOM[5'hC][31:6],
           _RANDOM[5'hD],
           _RANDOM[5'hE],
           _RANDOM[5'hF],
           _RANDOM[5'h10][7:0]};	// src/main/scala/nutcore/backend/fu/MDU.scala:52:7, :57:{44,52}
        io_out_valid_REG = _RANDOM[5'h10][8];	// src/main/scala/nutcore/backend/fu/MDU.scala:52:7, :56:43, :57:44
        io_out_valid_REG_1 = _RANDOM[5'h10][9];	// src/main/scala/nutcore/backend/fu/MDU.scala:52:7, :57:{44,60}
        io_out_valid_REG_2 = _RANDOM[5'h10][10];	// src/main/scala/nutcore/backend/fu/MDU.scala:52:7, :57:{44,52}
        io_out_valid_REG_3 = _RANDOM[5'h10][11];	// src/main/scala/nutcore/backend/fu/MDU.scala:52:7, :57:44
        busy = _RANDOM[5'h10][12];	// src/main/scala/nutcore/backend/fu/MDU.scala:52:7, :57:44, :62:21
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// src/main/scala/nutcore/backend/fu/MDU.scala:52:7
      `FIRRTL_AFTER_INITIAL	// src/main/scala/nutcore/backend/fu/MDU.scala:52:7
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign io_in_ready = ~busy;	// src/main/scala/nutcore/backend/fu/MDU.scala:52:7, :62:21, :63:24
  assign io_out_valid = io_out_valid_REG_3;	// src/main/scala/nutcore/backend/fu/MDU.scala:52:7, :57:44
  assign io_out_bits = io_out_bits_REG_2;	// src/main/scala/nutcore/backend/fu/MDU.scala:52:7, :57:44
endmodule

