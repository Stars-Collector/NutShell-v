// Generated by CIRCT firtool-1.62.0
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

// Standard header to adapt well known macros for prints and assertions.

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

module EmbeddedTLBMD(	// src/main/scala/nutcore/mem/EmbeddedTLB.scala:40:7
  input          clock,	// src/main/scala/nutcore/mem/EmbeddedTLB.scala:40:7
                 reset,	// src/main/scala/nutcore/mem/EmbeddedTLB.scala:40:7
  output [120:0] io_tlbmd_0,	// src/main/scala/nutcore/mem/EmbeddedTLB.scala:41:14
                 io_tlbmd_1,	// src/main/scala/nutcore/mem/EmbeddedTLB.scala:41:14
                 io_tlbmd_2,	// src/main/scala/nutcore/mem/EmbeddedTLB.scala:41:14
                 io_tlbmd_3,	// src/main/scala/nutcore/mem/EmbeddedTLB.scala:41:14
  input          io_write_wen,	// src/main/scala/nutcore/mem/EmbeddedTLB.scala:41:14
  input  [3:0]   io_write_waymask,	// src/main/scala/nutcore/mem/EmbeddedTLB.scala:41:14
  input  [120:0] io_write_wdata,	// src/main/scala/nutcore/mem/EmbeddedTLB.scala:41:14
  output         io_ready	// src/main/scala/nutcore/mem/EmbeddedTLB.scala:41:14
);

  reg [120:0] tlbmd_0_0;	// src/main/scala/nutcore/mem/EmbeddedTLB.scala:49:18
  reg [120:0] tlbmd_0_1;	// src/main/scala/nutcore/mem/EmbeddedTLB.scala:49:18
  reg [120:0] tlbmd_0_2;	// src/main/scala/nutcore/mem/EmbeddedTLB.scala:49:18
  reg [120:0] tlbmd_0_3;	// src/main/scala/nutcore/mem/EmbeddedTLB.scala:49:18
  reg         resetState;	// src/main/scala/nutcore/mem/EmbeddedTLB.scala:53:27
  always @(posedge clock) begin	// src/main/scala/nutcore/mem/EmbeddedTLB.scala:40:7
    automatic logic         wen;	// src/main/scala/nutcore/mem/EmbeddedTLB.scala:62:16
    automatic logic [3:0]   waymask;	// src/main/scala/nutcore/mem/EmbeddedTLB.scala:64:20
    automatic logic [120:0] dataword;	// src/main/scala/nutcore/mem/EmbeddedTLB.scala:65:21
    wen = resetState | io_write_wen;	// src/main/scala/nutcore/mem/EmbeddedTLB.scala:53:27, :62:16
    waymask = resetState ? 4'hF : io_write_waymask;	// src/main/scala/nutcore/mem/EmbeddedTLB.scala:40:7, :53:27, :64:20
    dataword = resetState ? 121'h0 : io_write_wdata;	// src/main/scala/nutcore/mem/EmbeddedTLB.scala:53:27, :65:21
    if (wen & waymask[0])	// src/main/scala/nutcore/mem/EmbeddedTLB.scala:62:16, :64:20, :68:41, :69:15
      tlbmd_0_0 <= dataword;	// src/main/scala/nutcore/mem/EmbeddedTLB.scala:49:18, :65:21
    if (wen & waymask[1])	// src/main/scala/nutcore/mem/EmbeddedTLB.scala:62:16, :64:20, :68:41, :69:15
      tlbmd_0_1 <= dataword;	// src/main/scala/nutcore/mem/EmbeddedTLB.scala:49:18, :65:21
    if (wen & waymask[2])	// src/main/scala/nutcore/mem/EmbeddedTLB.scala:62:16, :64:20, :68:41, :69:15
      tlbmd_0_2 <= dataword;	// src/main/scala/nutcore/mem/EmbeddedTLB.scala:49:18, :65:21
    if (wen & waymask[3])	// src/main/scala/nutcore/mem/EmbeddedTLB.scala:62:16, :64:20, :68:41, :69:15
      tlbmd_0_3 <= dataword;	// src/main/scala/nutcore/mem/EmbeddedTLB.scala:49:18, :65:21
    if (reset)	// src/main/scala/nutcore/mem/EmbeddedTLB.scala:40:7
      resetState <= 1'h1;	// src/main/scala/nutcore/mem/EmbeddedTLB.scala:53:27
    else	// src/main/scala/nutcore/mem/EmbeddedTLB.scala:40:7
      resetState <= 1'h0;	// src/main/scala/nutcore/mem/EmbeddedTLB.scala:53:27, :55:{22,35}
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_	// src/main/scala/nutcore/mem/EmbeddedTLB.scala:40:7
    `ifdef FIRRTL_BEFORE_INITIAL	// src/main/scala/nutcore/mem/EmbeddedTLB.scala:40:7
      `FIRRTL_BEFORE_INITIAL	// src/main/scala/nutcore/mem/EmbeddedTLB.scala:40:7
    `endif // FIRRTL_BEFORE_INITIAL
    initial begin	// src/main/scala/nutcore/mem/EmbeddedTLB.scala:40:7
      automatic logic [31:0] _RANDOM[0:15];	// src/main/scala/nutcore/mem/EmbeddedTLB.scala:40:7
      `ifdef INIT_RANDOM_PROLOG_	// src/main/scala/nutcore/mem/EmbeddedTLB.scala:40:7
        `INIT_RANDOM_PROLOG_	// src/main/scala/nutcore/mem/EmbeddedTLB.scala:40:7
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// src/main/scala/nutcore/mem/EmbeddedTLB.scala:40:7
        for (logic [4:0] i = 5'h0; i < 5'h10; i += 5'h1) begin
          _RANDOM[i[3:0]] = `RANDOM;	// src/main/scala/nutcore/mem/EmbeddedTLB.scala:40:7
        end	// src/main/scala/nutcore/mem/EmbeddedTLB.scala:40:7
        tlbmd_0_0 = {_RANDOM[4'h0], _RANDOM[4'h1], _RANDOM[4'h2], _RANDOM[4'h3][24:0]};	// src/main/scala/nutcore/mem/EmbeddedTLB.scala:40:7, :49:18
        tlbmd_0_1 =
          {_RANDOM[4'h3][31:25],
           _RANDOM[4'h4],
           _RANDOM[4'h5],
           _RANDOM[4'h6],
           _RANDOM[4'h7][17:0]};	// src/main/scala/nutcore/mem/EmbeddedTLB.scala:40:7, :49:18
        tlbmd_0_2 =
          {_RANDOM[4'h7][31:18],
           _RANDOM[4'h8],
           _RANDOM[4'h9],
           _RANDOM[4'hA],
           _RANDOM[4'hB][10:0]};	// src/main/scala/nutcore/mem/EmbeddedTLB.scala:40:7, :49:18
        tlbmd_0_3 =
          {_RANDOM[4'hB][31:11],
           _RANDOM[4'hC],
           _RANDOM[4'hD],
           _RANDOM[4'hE],
           _RANDOM[4'hF][3:0]};	// src/main/scala/nutcore/mem/EmbeddedTLB.scala:40:7, :49:18
        resetState = _RANDOM[4'hF][4];	// src/main/scala/nutcore/mem/EmbeddedTLB.scala:40:7, :49:18, :53:27
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// src/main/scala/nutcore/mem/EmbeddedTLB.scala:40:7
      `FIRRTL_AFTER_INITIAL	// src/main/scala/nutcore/mem/EmbeddedTLB.scala:40:7
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign io_tlbmd_0 = tlbmd_0_0;	// src/main/scala/nutcore/mem/EmbeddedTLB.scala:40:7, :49:18
  assign io_tlbmd_1 = tlbmd_0_1;	// src/main/scala/nutcore/mem/EmbeddedTLB.scala:40:7, :49:18
  assign io_tlbmd_2 = tlbmd_0_2;	// src/main/scala/nutcore/mem/EmbeddedTLB.scala:40:7, :49:18
  assign io_tlbmd_3 = tlbmd_0_3;	// src/main/scala/nutcore/mem/EmbeddedTLB.scala:40:7, :49:18
  assign io_ready = ~resetState;	// src/main/scala/nutcore/mem/EmbeddedTLB.scala:40:7, :53:27, :74:15
endmodule

