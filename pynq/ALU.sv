// Generated by CIRCT firtool-1.62.0
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

// Standard header to adapt well known macros for prints and assertions.

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

module ALU(	// src/main/scala/nutcore/backend/fu/ALU.scala:75:7
  input         clock,	// src/main/scala/nutcore/backend/fu/ALU.scala:75:7
                reset,	// src/main/scala/nutcore/backend/fu/ALU.scala:75:7
                io_in_valid,	// src/main/scala/nutcore/backend/fu/ALU.scala:76:14
  input  [63:0] io_in_bits_src1,	// src/main/scala/nutcore/backend/fu/ALU.scala:76:14
                io_in_bits_src2,	// src/main/scala/nutcore/backend/fu/ALU.scala:76:14
  input  [6:0]  io_in_bits_func,	// src/main/scala/nutcore/backend/fu/ALU.scala:76:14
  output        io_out_valid,	// src/main/scala/nutcore/backend/fu/ALU.scala:76:14
  output [63:0] io_out_bits,	// src/main/scala/nutcore/backend/fu/ALU.scala:76:14
  input  [63:0] io_cfIn_instr,	// src/main/scala/nutcore/backend/fu/ALU.scala:76:14
  input  [38:0] io_cfIn_pc,	// src/main/scala/nutcore/backend/fu/ALU.scala:76:14
                io_cfIn_pnpc,	// src/main/scala/nutcore/backend/fu/ALU.scala:76:14
  input  [3:0]  io_cfIn_brIdx,	// src/main/scala/nutcore/backend/fu/ALU.scala:76:14
  output [38:0] io_redirect_target,	// src/main/scala/nutcore/backend/fu/ALU.scala:76:14
  output        io_redirect_valid,	// src/main/scala/nutcore/backend/fu/ALU.scala:76:14
  input  [63:0] io_offset,	// src/main/scala/nutcore/backend/fu/ALU.scala:76:14
  output        REG__bore_valid,
  output [38:0] REG__bore_pc,
  output        REG__bore_isMissPredict,
  output [38:0] REG__bore_actualTarget,
  output        REG__bore_actualTaken,
  output [6:0]  REG__bore_fuOpType,
  output [1:0]  REG__bore_btbType,
  output        REG__bore_isRVC
);

  wire [38:0]  io_redirect_target_0;	// src/main/scala/nutcore/backend/fu/ALU.scala:124:28
  wire [64:0]  _adderRes_T_3 =
    {1'h0, io_in_bits_src1} + {1'h0, io_in_bits_src2 ^ {64{~(io_in_bits_func[6])}}}
    + {64'h0, ~(io_in_bits_func[6])};	// src/main/scala/nutcore/backend/fu/ALU.scala:60:31, :87:20, :88:{24,33,39,60}
  wire [63:0]  xorRes = io_in_bits_src1 ^ io_in_bits_src2;	// src/main/scala/nutcore/backend/fu/ALU.scala:89:21
  wire         slt = xorRes[63] ^ ~(_adderRes_T_3[64]);	// src/main/scala/nutcore/backend/fu/ALU.scala:88:60, :89:21, :90:{14,23}, :91:{19,28}
  wire [63:0]  shsrc1 =
    io_in_bits_func == 7'h2D
      ? {{32{io_in_bits_src1[31]}}, io_in_bits_src1[31:0]}
      : io_in_bits_func == 7'h25 ? {32'h0, io_in_bits_src1[31:0]} : io_in_bits_src1;	// src/main/scala/nutcore/backend/fu/ALU.scala:94:35, src/main/scala/utils/BitUtils.scala:41:20, :42:{41,46}, :49:41, src/main/scala/utils/LookupTree.scala:29:28
  wire [5:0]   shamt =
    io_in_bits_func[5] ? {1'h0, io_in_bits_src2[4:0]} : io_in_bits_src2[5:0];	// src/main/scala/nutcore/backend/fu/ALU.scala:45:34, :87:20, :97:{18,49,77}
  wire [126:0] _res_T_1 = {63'h0, shsrc1} << shamt;	// src/main/scala/nutcore/backend/fu/ALU.scala:97:18, :99:33, src/main/scala/utils/BitUtils.scala:49:41, src/main/scala/utils/LookupTree.scala:29:28
  wire [63:0]  _GEN = {58'h0, shamt};	// src/main/scala/nutcore/backend/fu/ALU.scala:97:18, :103:32
  wire [63:0]  res =
    io_in_bits_func[3:0] == 4'hD
      ? $signed($signed(shsrc1) >>> _GEN)
      : io_in_bits_func[3:0] == 4'h7
          ? io_in_bits_src1 & io_in_bits_src2
          : io_in_bits_func[3:0] == 4'h6
              ? io_in_bits_src1 | io_in_bits_src2
              : io_in_bits_func[3:0] == 4'h5
                  ? shsrc1 >> _GEN
                  : io_in_bits_func[3:0] == 4'h4
                      ? xorRes
                      : io_in_bits_func[3:0] == 4'h3
                          ? {63'h0, ~(_adderRes_T_3[64])}
                          : io_in_bits_func[3:0] == 4'h2
                              ? {63'h0, slt}
                              : io_in_bits_func[3:0] == 4'h1
                                  ? _res_T_1[63:0]
                                  : _adderRes_T_3[63:0];	// src/main/scala/nutcore/backend/fu/ALU.scala:88:60, :89:21, :90:{14,23}, :91:28, :98:35, :99:{33,42}, :103:32, :104:30, :105:30, :106:39, src/main/scala/utils/BitUtils.scala:49:41, src/main/scala/utils/LookupTree.scala:29:28
  wire         taken =
    (io_in_bits_func[2:1] == 2'h0 & xorRes == 64'h0 | io_in_bits_func[2:1] == 2'h2 & slt
     | (&(io_in_bits_func[2:1])) & ~(_adderRes_T_3[64])) ^ io_in_bits_func[0];	// src/main/scala/chisel3/util/Mux.scala:30:73, src/main/scala/nutcore/backend/fu/ALU.scala:65:39, :66:40, :75:7, :88:{39,60}, :89:21, :90:{14,23}, :91:28, :111:56, :118:72, src/main/scala/utils/LookupTree.scala:24:34
  wire [38:0]  bpuUpdateReq_actualTarget =
    io_in_bits_func[3] ? {_adderRes_T_3[38:1], 1'h0} : io_cfIn_pc + io_offset[38:0];	// src/main/scala/nutcore/backend/fu/ALU.scala:63:35, :76:14, :87:20, :88:60, :119:{19,41,57}
  wire         _GEN_0 = taken | io_in_bits_func[3];	// src/main/scala/nutcore/backend/fu/ALU.scala:63:35, :118:72, :120:25
  wire         predictWrong =
    _GEN_0
      ? ~(io_cfIn_brIdx[0]) | io_redirect_target_0 != io_cfIn_pnpc
      : io_cfIn_brIdx[0];	// src/main/scala/nutcore/backend/fu/ALU.scala:120:{25,59,64,82,105}, :124:28
  `ifndef SYNTHESIS	// src/main/scala/nutcore/backend/fu/ALU.scala:122:9
    always @(posedge clock) begin	// src/main/scala/nutcore/backend/fu/ALU.scala:122:9
      if (~reset
          & ~((&(io_cfIn_instr[1:0])) | ~(&(io_cfIn_instr[1:0])) | ~io_in_valid)) begin	// src/main/scala/nutcore/backend/fu/ALU.scala:121:{29,35}, :122:{9,29,50,53}
        if (`ASSERT_VERBOSE_COND_)	// src/main/scala/nutcore/backend/fu/ALU.scala:122:9
          $error("Assertion failed\n    at ALU.scala:122 assert(io.cfIn.instr(1,0) === \"b11\".U || isRVC || !valid)\n");	// src/main/scala/nutcore/backend/fu/ALU.scala:122:9
        if (`STOP_COND_)	// src/main/scala/nutcore/backend/fu/ALU.scala:122:9
          $fatal;	// src/main/scala/nutcore/backend/fu/ALU.scala:122:9
      end
    end // always @(posedge)
  `endif // not def SYNTHESIS
  assign io_redirect_target_0 =
    _GEN_0
      ? bpuUpdateReq_actualTarget
      : (&(io_cfIn_instr[1:0])) ? io_cfIn_pc + 39'h4 : io_cfIn_pc + 39'h2;	// src/main/scala/nutcore/backend/fu/ALU.scala:119:19, :120:25, :121:{29,35}, :124:{28,52,71,89}
  wire         bpuUpdateReq_valid = io_in_valid & io_in_bits_func[4];	// src/main/scala/nutcore/backend/fu/ALU.scala:62:31, :126:30
  wire         _GEN_1 = io_in_bits_func == 7'h5A;	// src/main/scala/nutcore/backend/fu/ALU.scala:136:214
  wire         _GEN_2 = io_in_bits_func == 7'h5E;	// src/main/scala/nutcore/backend/fu/ALU.scala:136:239
  reg          REG_valid;	// src/main/scala/nutcore/backend/fu/ALU.scala:159:34
  reg  [38:0]  REG_pc;	// src/main/scala/nutcore/backend/fu/ALU.scala:159:34
  reg          REG_isMissPredict;	// src/main/scala/nutcore/backend/fu/ALU.scala:159:34
  reg  [38:0]  REG_actualTarget;	// src/main/scala/nutcore/backend/fu/ALU.scala:159:34
  reg          REG_actualTaken;	// src/main/scala/nutcore/backend/fu/ALU.scala:159:34
  reg  [6:0]   REG_fuOpType;	// src/main/scala/nutcore/backend/fu/ALU.scala:159:34
  reg  [1:0]   REG_btbType;	// src/main/scala/nutcore/backend/fu/ALU.scala:159:34
  reg          REG_isRVC;	// src/main/scala/nutcore/backend/fu/ALU.scala:159:34
  wire         right = bpuUpdateReq_valid & ~predictWrong;	// src/main/scala/nutcore/backend/fu/ALU.scala:120:25, :126:30, :161:{32,35}
  wire         wrong = bpuUpdateReq_valid & predictWrong;	// src/main/scala/nutcore/backend/fu/ALU.scala:120:25, :126:30, :162:32
  wire         _GEN_3 = right & ~(io_in_bits_func[3]);	// src/main/scala/nutcore/backend/fu/ALU.scala:63:{30,35}, :161:32, :163:{35,42}
  wire         _GEN_4 = wrong & ~(io_in_bits_func[3]);	// src/main/scala/nutcore/backend/fu/ALU.scala:63:{30,35}, :162:32, :164:{35,42}
  wire         _GEN_5 = _GEN_4 & io_cfIn_pc[2:0] == 3'h0;	// src/main/scala/nutcore/backend/fu/ALU.scala:164:35, :165:{54,67,72}, src/main/scala/utils/LookupTree.scala:29:28
  wire         _GEN_6 = _GEN_5 & ~(&(io_cfIn_instr[1:0]));	// src/main/scala/nutcore/backend/fu/ALU.scala:121:{29,35}, :165:{35,54,82}
  wire         _GEN_7 = _GEN_5 & (&(io_cfIn_instr[1:0]));	// src/main/scala/nutcore/backend/fu/ALU.scala:121:{29,35}, :165:54, :166:{35,82}
  wire         _GEN_8 = _GEN_4 & io_cfIn_pc[2:0] == 3'h2;	// src/main/scala/nutcore/backend/fu/ALU.scala:164:35, :165:67, :167:{54,72}
  wire         _GEN_9 = _GEN_8 & ~(&(io_cfIn_instr[1:0]));	// src/main/scala/nutcore/backend/fu/ALU.scala:121:{29,35}, :167:{35,54,82}
  wire         _GEN_10 = _GEN_8 & (&(io_cfIn_instr[1:0]));	// src/main/scala/nutcore/backend/fu/ALU.scala:121:{29,35}, :167:54, :168:{35,82}
  wire         _GEN_11 = _GEN_4 & io_cfIn_pc[2:0] == 3'h4;	// src/main/scala/nutcore/backend/fu/ALU.scala:164:35, :165:67, :169:{54,72}, src/main/scala/utils/LookupTree.scala:29:28
  wire         _GEN_12 = _GEN_11 & ~(&(io_cfIn_instr[1:0]));	// src/main/scala/nutcore/backend/fu/ALU.scala:121:{29,35}, :169:{35,54,82}
  wire         _GEN_13 = _GEN_11 & (&(io_cfIn_instr[1:0]));	// src/main/scala/nutcore/backend/fu/ALU.scala:121:{29,35}, :169:54, :170:{35,82}
  wire         _GEN_14 = _GEN_4 & io_cfIn_pc[2:0] == 3'h6;	// src/main/scala/nutcore/backend/fu/ALU.scala:164:35, :165:67, :171:{54,72}, src/main/scala/utils/LookupTree.scala:29:28
  wire         _GEN_15 = _GEN_14 & ~(&(io_cfIn_instr[1:0]));	// src/main/scala/nutcore/backend/fu/ALU.scala:121:{29,35}, :171:{35,54,82}
  wire         _GEN_16 = _GEN_14 & (&(io_cfIn_instr[1:0]));	// src/main/scala/nutcore/backend/fu/ALU.scala:121:{29,35}, :171:54, :172:{35,82}
  wire         _GEN_17 = io_in_bits_func == 7'h58 | io_in_bits_func == 7'h5C;	// src/main/scala/nutcore/backend/fu/ALU.scala:136:{162,188}, :173:69
  wire         _GEN_18 = right & _GEN_17;	// src/main/scala/nutcore/backend/fu/ALU.scala:161:32, :173:{35,42,69}
  wire         _GEN_19 = wrong & _GEN_17;	// src/main/scala/nutcore/backend/fu/ALU.scala:162:32, :173:69, :174:{35,42}
  wire         _GEN_20 = right & _GEN_1;	// src/main/scala/nutcore/backend/fu/ALU.scala:136:214, :161:32, :175:{35,42}
  wire         _GEN_21 = wrong & _GEN_1;	// src/main/scala/nutcore/backend/fu/ALU.scala:136:214, :162:32, :176:{35,42}
  wire         _GEN_22 = right & _GEN_2;	// src/main/scala/nutcore/backend/fu/ALU.scala:136:239, :161:32, :177:{35,42}
  wire         _GEN_23 = wrong & _GEN_2;	// src/main/scala/nutcore/backend/fu/ALU.scala:136:239, :162:32, :178:{35,42}
  always @(posedge clock) begin	// src/main/scala/nutcore/backend/fu/ALU.scala:75:7
    automatic logic [1:0] _bpuUpdateReq_btbType_T_26 =
      {1'h0, io_in_bits_func == 7'h5C} | {2{io_in_bits_func == 7'h5E}};	// src/main/scala/chisel3/util/Mux.scala:30:73, src/main/scala/nutcore/backend/fu/ALU.scala:87:20, :136:{188,239}, src/main/scala/utils/LookupTree.scala:24:34
    REG_valid <= bpuUpdateReq_valid;	// src/main/scala/nutcore/backend/fu/ALU.scala:126:30, :159:34
    REG_pc <= io_cfIn_pc;	// src/main/scala/nutcore/backend/fu/ALU.scala:159:34
    REG_isMissPredict <= predictWrong;	// src/main/scala/nutcore/backend/fu/ALU.scala:120:25, :159:34
    REG_actualTarget <= bpuUpdateReq_actualTarget;	// src/main/scala/nutcore/backend/fu/ALU.scala:119:19, :159:34
    REG_actualTaken <= taken;	// src/main/scala/nutcore/backend/fu/ALU.scala:118:72, :159:34
    REG_fuOpType <= io_in_bits_func;	// src/main/scala/nutcore/backend/fu/ALU.scala:159:34
    REG_btbType <=
      {_bpuUpdateReq_btbType_T_26[1] | io_in_bits_func == 7'h5A,
       _bpuUpdateReq_btbType_T_26[0] | io_in_bits_func == 7'h58};	// src/main/scala/chisel3/util/Mux.scala:30:73, src/main/scala/nutcore/backend/fu/ALU.scala:136:{162,214}, :159:34, src/main/scala/utils/LookupTree.scala:24:34
    REG_isRVC <= ~(&(io_cfIn_instr[1:0]));	// src/main/scala/nutcore/backend/fu/ALU.scala:121:{29,35}, :159:34
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_	// src/main/scala/nutcore/backend/fu/ALU.scala:75:7
    `ifdef FIRRTL_BEFORE_INITIAL	// src/main/scala/nutcore/backend/fu/ALU.scala:75:7
      `FIRRTL_BEFORE_INITIAL	// src/main/scala/nutcore/backend/fu/ALU.scala:75:7
    `endif // FIRRTL_BEFORE_INITIAL
    initial begin	// src/main/scala/nutcore/backend/fu/ALU.scala:75:7
      automatic logic [31:0] _RANDOM[0:2];	// src/main/scala/nutcore/backend/fu/ALU.scala:75:7
      `ifdef INIT_RANDOM_PROLOG_	// src/main/scala/nutcore/backend/fu/ALU.scala:75:7
        `INIT_RANDOM_PROLOG_	// src/main/scala/nutcore/backend/fu/ALU.scala:75:7
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// src/main/scala/nutcore/backend/fu/ALU.scala:75:7
        for (logic [1:0] i = 2'h0; i < 2'h3; i += 2'h1) begin
          _RANDOM[i] = `RANDOM;	// src/main/scala/nutcore/backend/fu/ALU.scala:75:7
        end	// src/main/scala/nutcore/backend/fu/ALU.scala:75:7
        REG_valid = _RANDOM[2'h0][0];	// src/main/scala/nutcore/backend/fu/ALU.scala:75:7, :159:34
        REG_pc = {_RANDOM[2'h0][31:1], _RANDOM[2'h1][7:0]};	// src/main/scala/nutcore/backend/fu/ALU.scala:75:7, :159:34
        REG_isMissPredict = _RANDOM[2'h1][8];	// src/main/scala/nutcore/backend/fu/ALU.scala:75:7, :159:34
        REG_actualTarget = {_RANDOM[2'h1][31:9], _RANDOM[2'h2][15:0]};	// src/main/scala/nutcore/backend/fu/ALU.scala:75:7, :159:34
        REG_actualTaken = _RANDOM[2'h2][16];	// src/main/scala/nutcore/backend/fu/ALU.scala:75:7, :159:34
        REG_fuOpType = _RANDOM[2'h2][23:17];	// src/main/scala/nutcore/backend/fu/ALU.scala:75:7, :159:34
        REG_btbType = _RANDOM[2'h2][25:24];	// src/main/scala/nutcore/backend/fu/ALU.scala:75:7, :159:34
        REG_isRVC = _RANDOM[2'h2][26];	// src/main/scala/nutcore/backend/fu/ALU.scala:75:7, :159:34
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// src/main/scala/nutcore/backend/fu/ALU.scala:75:7
      `FIRRTL_AFTER_INITIAL	// src/main/scala/nutcore/backend/fu/ALU.scala:75:7
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign io_out_valid = io_in_valid;	// src/main/scala/nutcore/backend/fu/ALU.scala:75:7
  assign io_out_bits =
    io_in_bits_func[4]
      ? ((&(io_cfIn_instr[1:0]))
           ? {{25{io_cfIn_pc[38]}}, io_cfIn_pc} + 64'h4
           : {{25{io_cfIn_pc[38]}}, io_cfIn_pc} + 64'h2)
      : io_in_bits_func[5] ? {{32{res[31]}}, res[31:0]} : res;	// src/main/scala/nutcore/backend/fu/ALU.scala:45:34, :62:31, :75:7, :108:{19,57}, :121:{29,35}, :132:{21,32,71,108}, src/main/scala/utils/BitUtils.scala:41:20, :42:46, src/main/scala/utils/LookupTree.scala:29:28
  assign io_redirect_target = io_redirect_target_0;	// src/main/scala/nutcore/backend/fu/ALU.scala:75:7, :124:28
  assign io_redirect_valid = bpuUpdateReq_valid & predictWrong;	// src/main/scala/nutcore/backend/fu/ALU.scala:75:7, :120:25, :126:{30,39}
  assign REG__bore_valid = REG_valid;	// src/main/scala/nutcore/backend/fu/ALU.scala:75:7, :159:34
  assign REG__bore_pc = REG_pc;	// src/main/scala/nutcore/backend/fu/ALU.scala:75:7, :159:34
  assign REG__bore_isMissPredict = REG_isMissPredict;	// src/main/scala/nutcore/backend/fu/ALU.scala:75:7, :159:34
  assign REG__bore_actualTarget = REG_actualTarget;	// src/main/scala/nutcore/backend/fu/ALU.scala:75:7, :159:34
  assign REG__bore_actualTaken = REG_actualTaken;	// src/main/scala/nutcore/backend/fu/ALU.scala:75:7, :159:34
  assign REG__bore_fuOpType = REG_fuOpType;	// src/main/scala/nutcore/backend/fu/ALU.scala:75:7, :159:34
  assign REG__bore_btbType = REG_btbType;	// src/main/scala/nutcore/backend/fu/ALU.scala:75:7, :159:34
  assign REG__bore_isRVC = REG_isRVC;	// src/main/scala/nutcore/backend/fu/ALU.scala:75:7, :159:34
endmodule

