// Generated by CIRCT firtool-1.62.0
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

// Standard header to adapt well known macros for prints and assertions.

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

module IFU_inorder(	// src/main/scala/nutcore/frontend/IFU.scala:309:7
  input         clock,	// src/main/scala/nutcore/frontend/IFU.scala:309:7
                reset,	// src/main/scala/nutcore/frontend/IFU.scala:309:7
                io_imem_req_ready,	// src/main/scala/nutcore/frontend/IFU.scala:310:14
  output        io_imem_req_valid,	// src/main/scala/nutcore/frontend/IFU.scala:310:14
  output [38:0] io_imem_req_bits_addr,	// src/main/scala/nutcore/frontend/IFU.scala:310:14
  output [81:0] io_imem_req_bits_user,	// src/main/scala/nutcore/frontend/IFU.scala:310:14
  output        io_imem_resp_ready,	// src/main/scala/nutcore/frontend/IFU.scala:310:14
  input         io_imem_resp_valid,	// src/main/scala/nutcore/frontend/IFU.scala:310:14
  input  [63:0] io_imem_resp_bits_rdata,	// src/main/scala/nutcore/frontend/IFU.scala:310:14
  input  [81:0] io_imem_resp_bits_user,	// src/main/scala/nutcore/frontend/IFU.scala:310:14
  input         io_out_ready,	// src/main/scala/nutcore/frontend/IFU.scala:310:14
  output        io_out_valid,	// src/main/scala/nutcore/frontend/IFU.scala:310:14
  output [63:0] io_out_bits_instr,	// src/main/scala/nutcore/frontend/IFU.scala:310:14
  output [38:0] io_out_bits_pc,	// src/main/scala/nutcore/frontend/IFU.scala:310:14
                io_out_bits_pnpc,	// src/main/scala/nutcore/frontend/IFU.scala:310:14
  output        io_out_bits_exceptionVec_12,	// src/main/scala/nutcore/frontend/IFU.scala:310:14
  output [3:0]  io_out_bits_brIdx,	// src/main/scala/nutcore/frontend/IFU.scala:310:14
  input  [38:0] io_redirect_target,	// src/main/scala/nutcore/frontend/IFU.scala:310:14
  input         io_redirect_valid,	// src/main/scala/nutcore/frontend/IFU.scala:310:14
  output [3:0]  io_flushVec,	// src/main/scala/nutcore/frontend/IFU.scala:310:14
  input         io_ipf,	// src/main/scala/nutcore/frontend/IFU.scala:310:14
                bp1_req__bore_valid,
  input  [38:0] bp1_req__bore_pc,
  input         bp1_req__bore_isMissPredict,
  input  [38:0] bp1_req__bore_actualTarget,
  input         bp1_req__bore_actualTaken,
  input  [6:0]  bp1_req__bore_fuOpType,
  input  [1:0]  bp1_req__bore_btbType,
  input         bp1_req__bore_isRVC,
                bp1_flushTLB__bore,
                bp1_flushBTB__bore
);

  wire [38:0] _bp1_io_out_target;	// src/main/scala/nutcore/frontend/IFU.scala:326:19
  wire        _bp1_io_out_valid;	// src/main/scala/nutcore/frontend/IFU.scala:326:19
  wire [2:0]  _bp1_io_brIdx;	// src/main/scala/nutcore/frontend/IFU.scala:326:19
  wire        _bp1_io_crosslineJump;	// src/main/scala/nutcore/frontend/IFU.scala:326:19
  wire        _GEN = io_redirect_valid;	// src/main/scala/nutcore/frontend/IFU.scala:394:33
  reg  [38:0] pc;	// src/main/scala/nutcore/frontend/IFU.scala:322:19
  wire        _bp1_io_in_pc_valid_T = io_imem_req_ready & io_out_ready;	// src/main/scala/chisel3/util/Decoupled.scala:51:35
  wire [38:0] _snpc_T_1 = pc + 39'h2;	// src/main/scala/nutcore/frontend/IFU.scala:322:19, :324:28
  wire [38:0] _snpc_T_3 = pc + 39'h4;	// src/main/scala/nutcore/frontend/IFU.scala:322:19, :324:38
  reg         crosslineJumpLatch;	// src/main/scala/nutcore/frontend/IFU.scala:329:35
  reg  [38:0] crosslineJumpTarget;	// src/main/scala/nutcore/frontend/IFU.scala:333:38
  wire        _GEN_0 = ~_bp1_io_out_valid | _bp1_io_crosslineJump;	// src/main/scala/nutcore/frontend/IFU.scala:326:19, :340:104
  wire [38:0] npc =
    io_redirect_valid
      ? io_redirect_target
      : crosslineJumpLatch
          ? crosslineJumpTarget
          : _GEN_0 ? (pc[1] ? _snpc_T_1 : _snpc_T_3) : _bp1_io_out_target;	// src/main/scala/nutcore/frontend/IFU.scala:322:19, :324:{17,20,28,38}, :326:19, :329:35, :333:38, :340:{16,59,104}
  wire        io_imem_resp_ready_0 = io_out_ready | io_redirect_valid;	// src/main/scala/nutcore/frontend/IFU.scala:374:38
  reg         r;	// src/main/scala/utils/StopWatch.scala:24:20
  always @(posedge clock) begin	// src/main/scala/nutcore/frontend/IFU.scala:309:7
    if (reset) begin	// src/main/scala/nutcore/frontend/IFU.scala:309:7
      pc <= 39'h60000000;	// src/main/scala/nutcore/frontend/IFU.scala:322:19
      crosslineJumpLatch <= 1'h0;	// src/main/scala/nutcore/frontend/IFU.scala:329:35
      r <= 1'h0;	// src/main/scala/nutcore/frontend/IFU.scala:329:35, src/main/scala/utils/StopWatch.scala:24:20
    end
    else begin	// src/main/scala/nutcore/frontend/IFU.scala:309:7
      automatic logic pcUpdate = io_redirect_valid | _bp1_io_in_pc_valid_T;	// src/main/scala/chisel3/util/Decoupled.scala:51:35, src/main/scala/nutcore/frontend/IFU.scala:323:36
      if (pcUpdate) begin	// src/main/scala/nutcore/frontend/IFU.scala:323:36
        if (io_redirect_valid)	// src/main/scala/nutcore/frontend/IFU.scala:310:14
          pc <= io_redirect_target;	// src/main/scala/nutcore/frontend/IFU.scala:322:19
        else if (crosslineJumpLatch)	// src/main/scala/nutcore/frontend/IFU.scala:329:35
          pc <= crosslineJumpTarget;	// src/main/scala/nutcore/frontend/IFU.scala:322:19, :333:38
        else if (_GEN_0) begin	// src/main/scala/nutcore/frontend/IFU.scala:340:104
          if (pc[1])	// src/main/scala/nutcore/frontend/IFU.scala:322:19, :324:20
            pc <= _snpc_T_1;	// src/main/scala/nutcore/frontend/IFU.scala:322:19, :324:28
          else	// src/main/scala/nutcore/frontend/IFU.scala:324:20
            pc <= _snpc_T_3;	// src/main/scala/nutcore/frontend/IFU.scala:322:19, :324:38
        end
        else	// src/main/scala/nutcore/frontend/IFU.scala:340:104
          pc <= _bp1_io_out_target;	// src/main/scala/nutcore/frontend/IFU.scala:322:19, :326:19
      end
      if (pcUpdate | io_redirect_valid)	// src/main/scala/nutcore/frontend/IFU.scala:323:36, :330:17
        crosslineJumpLatch <=
          ~io_redirect_valid & _bp1_io_crosslineJump & ~crosslineJumpLatch;	// src/main/scala/nutcore/frontend/IFU.scala:326:19, :329:35, :331:{30,71}
      r <= ~(io_imem_resp_ready_0 & io_imem_resp_valid) & (io_out_ready | r);	// src/main/scala/chisel3/util/Decoupled.scala:51:35, src/main/scala/nutcore/frontend/IFU.scala:374:38, src/main/scala/utils/StopWatch.scala:24:20, :30:{20,24}, :31:{19,23}
    end
    if (_bp1_io_crosslineJump)	// src/main/scala/nutcore/frontend/IFU.scala:326:19
      crosslineJumpTarget <= _bp1_io_out_target;	// src/main/scala/nutcore/frontend/IFU.scala:326:19, :333:38
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_	// src/main/scala/nutcore/frontend/IFU.scala:309:7
    `ifdef FIRRTL_BEFORE_INITIAL	// src/main/scala/nutcore/frontend/IFU.scala:309:7
      `FIRRTL_BEFORE_INITIAL	// src/main/scala/nutcore/frontend/IFU.scala:309:7
    `endif // FIRRTL_BEFORE_INITIAL
    initial begin	// src/main/scala/nutcore/frontend/IFU.scala:309:7
      automatic logic [31:0] _RANDOM[0:2];	// src/main/scala/nutcore/frontend/IFU.scala:309:7
      `ifdef INIT_RANDOM_PROLOG_	// src/main/scala/nutcore/frontend/IFU.scala:309:7
        `INIT_RANDOM_PROLOG_	// src/main/scala/nutcore/frontend/IFU.scala:309:7
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// src/main/scala/nutcore/frontend/IFU.scala:309:7
        for (logic [1:0] i = 2'h0; i < 2'h3; i += 2'h1) begin
          _RANDOM[i] = `RANDOM;	// src/main/scala/nutcore/frontend/IFU.scala:309:7
        end	// src/main/scala/nutcore/frontend/IFU.scala:309:7
        pc = {_RANDOM[2'h0], _RANDOM[2'h1][6:0]};	// src/main/scala/nutcore/frontend/IFU.scala:309:7, :322:19
        crosslineJumpLatch = _RANDOM[2'h1][7];	// src/main/scala/nutcore/frontend/IFU.scala:309:7, :322:19, :329:35
        crosslineJumpTarget = {_RANDOM[2'h1][31:8], _RANDOM[2'h2][14:0]};	// src/main/scala/nutcore/frontend/IFU.scala:309:7, :322:19, :333:38
        r = _RANDOM[2'h2][15];	// src/main/scala/nutcore/frontend/IFU.scala:309:7, :333:38, src/main/scala/utils/StopWatch.scala:24:20
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// src/main/scala/nutcore/frontend/IFU.scala:309:7
      `FIRRTL_AFTER_INITIAL	// src/main/scala/nutcore/frontend/IFU.scala:309:7
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  BPU_inorder bp1 (	// src/main/scala/nutcore/frontend/IFU.scala:326:19
    .clock                   (clock),
    .reset                   (reset),
    .io_in_pc_valid          (_bp1_io_in_pc_valid_T),	// src/main/scala/chisel3/util/Decoupled.scala:51:35
    .io_in_pc_bits           (npc),	// src/main/scala/nutcore/frontend/IFU.scala:340:16
    .io_out_target           (_bp1_io_out_target),
    .io_out_valid            (_bp1_io_out_valid),
    .io_flush                (io_redirect_valid),
    .io_brIdx                (_bp1_io_brIdx),
    .io_crosslineJump        (_bp1_io_crosslineJump),
    .req__bore_valid         (bp1_req__bore_valid),
    .req__bore_pc            (bp1_req__bore_pc),
    .req__bore_isMissPredict (bp1_req__bore_isMissPredict),
    .req__bore_actualTarget  (bp1_req__bore_actualTarget),
    .req__bore_actualTaken   (bp1_req__bore_actualTaken),
    .req__bore_fuOpType      (bp1_req__bore_fuOpType),
    .req__bore_btbType       (bp1_req__bore_btbType),
    .req__bore_isRVC         (bp1_req__bore_isRVC),
    .flushTLB__bore          (bp1_flushTLB__bore),
    .flushBTB__bore          (bp1_flushBTB__bore)
  );
  assign io_imem_req_valid = io_out_ready;	// src/main/scala/nutcore/frontend/IFU.scala:309:7
  assign io_imem_req_bits_addr = {pc[38:1], 1'h0};	// src/main/scala/nutcore/frontend/IFU.scala:309:7, :322:19, :329:35, :370:{36,39}
  assign io_imem_req_bits_user =
    {~(io_redirect_valid | crosslineJumpLatch)
       & (_bp1_io_crosslineJump | ~_bp1_io_out_valid),
     io_redirect_valid ? 3'h0 : _bp1_io_brIdx,
     npc,
     pc};	// src/main/scala/nutcore/frontend/IFU.scala:309:7, :322:19, :326:19, :329:35, :340:16, :341:{21,54,87,114}, :349:29, :371:82
  assign io_imem_resp_ready = io_imem_resp_ready_0;	// src/main/scala/nutcore/frontend/IFU.scala:309:7, :374:38
  assign io_out_valid = io_imem_resp_valid & ~io_redirect_valid;	// src/main/scala/nutcore/frontend/IFU.scala:309:7, :391:{38,41}
  assign io_out_bits_instr = io_imem_resp_bits_rdata;	// src/main/scala/nutcore/frontend/IFU.scala:309:7
  assign io_out_bits_pc = io_imem_resp_bits_user[38:0];	// src/main/scala/nutcore/frontend/IFU.scala:309:7, :386:24
  assign io_out_bits_pnpc = io_imem_resp_bits_user[77:39];	// src/main/scala/nutcore/frontend/IFU.scala:309:7, :387:26
  assign io_out_bits_exceptionVec_12 = io_ipf;	// src/main/scala/nutcore/frontend/IFU.scala:309:7
  assign io_out_bits_brIdx = io_imem_resp_bits_user[81:78];	// src/main/scala/nutcore/frontend/IFU.scala:309:7, :388:27
  assign io_flushVec = {4{io_redirect_valid}};	// src/main/scala/nutcore/frontend/IFU.scala:309:7, :367:21
endmodule

