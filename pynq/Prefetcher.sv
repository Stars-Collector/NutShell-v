// Generated by CIRCT firtool-1.62.0
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

// Standard header to adapt well known macros for prints and assertions.

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

module Prefetcher(	// src/main/scala/system/Prefetcher.scala:32:7
  input         clock,	// src/main/scala/system/Prefetcher.scala:32:7
                reset,	// src/main/scala/system/Prefetcher.scala:32:7
  output        io_in_ready,	// src/main/scala/system/Prefetcher.scala:33:20
  input         io_in_valid,	// src/main/scala/system/Prefetcher.scala:33:20
  input  [31:0] io_in_bits_addr,	// src/main/scala/system/Prefetcher.scala:33:20
  input  [2:0]  io_in_bits_size,	// src/main/scala/system/Prefetcher.scala:33:20
  input  [3:0]  io_in_bits_cmd,	// src/main/scala/system/Prefetcher.scala:33:20
  input  [7:0]  io_in_bits_wmask,	// src/main/scala/system/Prefetcher.scala:33:20
  input  [63:0] io_in_bits_wdata,	// src/main/scala/system/Prefetcher.scala:33:20
  input         io_out_ready,	// src/main/scala/system/Prefetcher.scala:33:20
  output        io_out_valid,	// src/main/scala/system/Prefetcher.scala:33:20
  output [31:0] io_out_bits_addr,	// src/main/scala/system/Prefetcher.scala:33:20
  output [2:0]  io_out_bits_size,	// src/main/scala/system/Prefetcher.scala:33:20
  output [3:0]  io_out_bits_cmd,	// src/main/scala/system/Prefetcher.scala:33:20
  output [7:0]  io_out_bits_wmask,	// src/main/scala/system/Prefetcher.scala:33:20
  output [63:0] io_out_bits_wdata	// src/main/scala/system/Prefetcher.scala:33:20
);

  wire        io_out_valid_0;	// src/main/scala/system/Prefetcher.scala:52:21, :54:18, :59:18
  reg         getNewReq;	// src/main/scala/system/Prefetcher.scala:37:26
  reg  [31:0] prefetchReq_addr;	// src/main/scala/system/Prefetcher.scala:38:28
  reg  [2:0]  prefetchReq_size;	// src/main/scala/system/Prefetcher.scala:38:28
  reg  [7:0]  prefetchReq_wmask;	// src/main/scala/system/Prefetcher.scala:38:28
  reg  [63:0] prefetchReq_wdata;	// src/main/scala/system/Prefetcher.scala:38:28
  reg  [63:0] lastReqAddr;	// src/main/scala/system/Prefetcher.scala:44:28
  assign io_out_valid_0 =
    getNewReq
      ? ~({prefetchReq_addr[31:30], ~(prefetchReq_addr[29:28])} == 4'h0
          | (&(prefetchReq_addr[31:29])))
      : io_in_valid;	// src/main/scala/nutcore/NutCore.scala:86:{11,24,44}, :87:15, src/main/scala/system/Prefetcher.scala:37:26, :38:28, :52:21, :54:18, :59:{18,21}
  wire        io_in_ready_0 = ~getNewReq & (~io_in_valid | io_out_ready & io_out_valid_0);	// src/main/scala/chisel3/util/Decoupled.scala:51:35, src/main/scala/system/Prefetcher.scala:37:26, :52:{9,21}, :54:18, :55:{17,20,33}, :59:18, :60:17
  always @(posedge clock) begin	// src/main/scala/system/Prefetcher.scala:32:7
    if (reset) begin	// src/main/scala/system/Prefetcher.scala:32:7
      getNewReq <= 1'h0;	// src/main/scala/system/Prefetcher.scala:37:26
      lastReqAddr <= 64'h0;	// src/main/scala/system/Prefetcher.scala:44:28
    end
    else begin	// src/main/scala/system/Prefetcher.scala:32:7
      automatic logic _getNewReq_T;	// src/main/scala/chisel3/util/Decoupled.scala:51:35
      _getNewReq_T = io_in_ready_0 & io_in_valid;	// src/main/scala/chisel3/util/Decoupled.scala:51:35, src/main/scala/system/Prefetcher.scala:52:21, :55:17, :60:17
      if (getNewReq)	// src/main/scala/system/Prefetcher.scala:37:26
        getNewReq <=
          ~(io_out_ready & io_out_valid_0
            | {prefetchReq_addr[31:30], ~(prefetchReq_addr[29:28])} == 4'h0
            | (&(prefetchReq_addr[31:29])));	// src/main/scala/chisel3/util/Decoupled.scala:51:35, src/main/scala/nutcore/NutCore.scala:86:{11,24,44}, src/main/scala/system/Prefetcher.scala:37:26, :38:28, :52:21, :54:18, :59:18, :61:{18,32}
      else	// src/main/scala/system/Prefetcher.scala:37:26
        getNewReq <=
          _getNewReq_T & io_in_bits_cmd[1]
          & {32'h0,
             io_in_bits_addr & 32'hFFFFFFC0} != (lastReqAddr & 64'hFFFFFFFFFFFFFFC0);	// src/main/scala/bus/simplebus/SimpleBus.scala:75:22, src/main/scala/chisel3/util/Decoupled.scala:51:35, src/main/scala/system/Prefetcher.scala:37:26, :44:28, :46:18, :49:21, :50:{30,42,59}, :56:53
      if (_getNewReq_T)	// src/main/scala/chisel3/util/Decoupled.scala:51:35
        lastReqAddr <= {32'h0, io_in_bits_addr};	// src/main/scala/system/Prefetcher.scala:44:28, :46:18
    end
    prefetchReq_addr <= io_in_bits_addr + 32'h40;	// src/main/scala/system/Prefetcher.scala:38:28, :40:39
    prefetchReq_size <= io_in_bits_size;	// src/main/scala/system/Prefetcher.scala:38:28
    prefetchReq_wmask <= io_in_bits_wmask;	// src/main/scala/system/Prefetcher.scala:38:28
    prefetchReq_wdata <= io_in_bits_wdata;	// src/main/scala/system/Prefetcher.scala:38:28
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_	// src/main/scala/system/Prefetcher.scala:32:7
    `ifdef FIRRTL_BEFORE_INITIAL	// src/main/scala/system/Prefetcher.scala:32:7
      `FIRRTL_BEFORE_INITIAL	// src/main/scala/system/Prefetcher.scala:32:7
    `endif // FIRRTL_BEFORE_INITIAL
    initial begin	// src/main/scala/system/Prefetcher.scala:32:7
      automatic logic [31:0] _RANDOM[0:5];	// src/main/scala/system/Prefetcher.scala:32:7
      `ifdef INIT_RANDOM_PROLOG_	// src/main/scala/system/Prefetcher.scala:32:7
        `INIT_RANDOM_PROLOG_	// src/main/scala/system/Prefetcher.scala:32:7
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// src/main/scala/system/Prefetcher.scala:32:7
        for (logic [2:0] i = 3'h0; i < 3'h6; i += 3'h1) begin
          _RANDOM[i] = `RANDOM;	// src/main/scala/system/Prefetcher.scala:32:7
        end	// src/main/scala/system/Prefetcher.scala:32:7
        getNewReq = _RANDOM[3'h0][0];	// src/main/scala/system/Prefetcher.scala:32:7, :37:26
        prefetchReq_addr = {_RANDOM[3'h0][31:1], _RANDOM[3'h1][0]};	// src/main/scala/system/Prefetcher.scala:32:7, :37:26, :38:28
        prefetchReq_size = _RANDOM[3'h1][3:1];	// src/main/scala/system/Prefetcher.scala:32:7, :38:28
        prefetchReq_wmask = _RANDOM[3'h1][15:8];	// src/main/scala/system/Prefetcher.scala:32:7, :38:28
        prefetchReq_wdata = {_RANDOM[3'h1][31:16], _RANDOM[3'h2], _RANDOM[3'h3][15:0]};	// src/main/scala/system/Prefetcher.scala:32:7, :38:28
        lastReqAddr = {_RANDOM[3'h3][31:16], _RANDOM[3'h4], _RANDOM[3'h5][15:0]};	// src/main/scala/system/Prefetcher.scala:32:7, :38:28, :44:28
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// src/main/scala/system/Prefetcher.scala:32:7
      `FIRRTL_AFTER_INITIAL	// src/main/scala/system/Prefetcher.scala:32:7
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign io_in_ready = io_in_ready_0;	// src/main/scala/system/Prefetcher.scala:32:7, :52:21, :55:17, :60:17
  assign io_out_valid = io_out_valid_0;	// src/main/scala/system/Prefetcher.scala:32:7, :52:21, :54:18, :59:18
  assign io_out_bits_addr = getNewReq ? prefetchReq_addr : io_in_bits_addr;	// src/main/scala/system/Prefetcher.scala:32:7, :37:26, :38:28, :52:21, :53:17, :58:17
  assign io_out_bits_size = getNewReq ? prefetchReq_size : io_in_bits_size;	// src/main/scala/system/Prefetcher.scala:32:7, :37:26, :38:28, :52:21, :53:17, :58:17
  assign io_out_bits_cmd = getNewReq ? 4'h4 : io_in_bits_cmd;	// src/main/scala/system/Prefetcher.scala:32:7, :37:26, :39:19, :52:21, :53:17, :58:17
  assign io_out_bits_wmask = getNewReq ? prefetchReq_wmask : io_in_bits_wmask;	// src/main/scala/system/Prefetcher.scala:32:7, :37:26, :38:28, :52:21, :53:17, :58:17
  assign io_out_bits_wdata = getNewReq ? prefetchReq_wdata : io_in_bits_wdata;	// src/main/scala/system/Prefetcher.scala:32:7, :37:26, :38:28, :52:21, :53:17, :58:17
endmodule

