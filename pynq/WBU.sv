// Generated by CIRCT firtool-1.62.0
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

// Standard header to adapt well known macros for prints and assertions.

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

module WBU(	// src/main/scala/nutcore/backend/seq/WBU.scala:25:7
  input         io_in_valid,	// src/main/scala/nutcore/backend/seq/WBU.scala:26:14
  input  [38:0] io_in_bits_decode_cf_pc,	// src/main/scala/nutcore/backend/seq/WBU.scala:26:14
                io_in_bits_decode_cf_redirect_target,	// src/main/scala/nutcore/backend/seq/WBU.scala:26:14
  input         io_in_bits_decode_cf_redirect_valid,	// src/main/scala/nutcore/backend/seq/WBU.scala:26:14
  input  [2:0]  io_in_bits_decode_ctrl_fuType,	// src/main/scala/nutcore/backend/seq/WBU.scala:26:14
  input         io_in_bits_decode_ctrl_rfWen,	// src/main/scala/nutcore/backend/seq/WBU.scala:26:14
  input  [4:0]  io_in_bits_decode_ctrl_rfDest,	// src/main/scala/nutcore/backend/seq/WBU.scala:26:14
  input  [63:0] io_in_bits_commits_0,	// src/main/scala/nutcore/backend/seq/WBU.scala:26:14
                io_in_bits_commits_1,	// src/main/scala/nutcore/backend/seq/WBU.scala:26:14
                io_in_bits_commits_2,	// src/main/scala/nutcore/backend/seq/WBU.scala:26:14
                io_in_bits_commits_3,	// src/main/scala/nutcore/backend/seq/WBU.scala:26:14
  output        io_wb_rfWen,	// src/main/scala/nutcore/backend/seq/WBU.scala:26:14
  output [4:0]  io_wb_rfDest,	// src/main/scala/nutcore/backend/seq/WBU.scala:26:14
  output [63:0] io_wb_rfData,	// src/main/scala/nutcore/backend/seq/WBU.scala:26:14
  output [38:0] io_redirect_target,	// src/main/scala/nutcore/backend/seq/WBU.scala:26:14
  output        io_redirect_valid,	// src/main/scala/nutcore/backend/seq/WBU.scala:26:14
                io_in_valid__bore,
  output [63:0] io_wb_rfData__bore,
  output        falseWire__bore,
                io_in_valid__bore_0,
  output [4:0]  io_wb_rfDest__bore,
  output [38:0] io_in_bits_decode_cf_pc__bore,
  output        io_wb_rfWen__bore
);

  wire             falseWire = 1'h0;	// src/main/scala/nutcore/backend/seq/WBU.scala:43:27
  wire             io_wb_rfWen_0 = io_in_bits_decode_ctrl_rfWen & io_in_valid;	// src/main/scala/nutcore/backend/seq/WBU.scala:32:47
  wire [7:0][63:0] _GEN =
    {{io_in_bits_commits_0},
     {io_in_bits_commits_0},
     {io_in_bits_commits_0},
     {64'h0},
     {io_in_bits_commits_3},
     {io_in_bits_commits_2},
     {io_in_bits_commits_1},
     {io_in_bits_commits_0}};	// src/main/scala/nutcore/backend/seq/WBU.scala:26:14, :34:16
  assign io_wb_rfWen = io_wb_rfWen_0;	// src/main/scala/nutcore/backend/seq/WBU.scala:25:7, :32:47
  assign io_wb_rfDest = io_in_bits_decode_ctrl_rfDest;	// src/main/scala/nutcore/backend/seq/WBU.scala:25:7
  assign io_wb_rfData = _GEN[io_in_bits_decode_ctrl_fuType];	// src/main/scala/nutcore/backend/seq/WBU.scala:25:7, :34:16
  assign io_redirect_target = io_in_bits_decode_cf_redirect_target;	// src/main/scala/nutcore/backend/seq/WBU.scala:25:7
  assign io_redirect_valid = io_in_bits_decode_cf_redirect_valid & io_in_valid;	// src/main/scala/nutcore/backend/seq/WBU.scala:25:7, :39:60
  assign io_in_valid__bore = io_in_valid;	// src/main/scala/nutcore/backend/seq/WBU.scala:25:7
  assign io_wb_rfData__bore = _GEN[io_in_bits_decode_ctrl_fuType];	// src/main/scala/nutcore/backend/seq/WBU.scala:25:7, :34:16
  assign falseWire__bore = falseWire;	// src/main/scala/nutcore/backend/seq/WBU.scala:25:7, :43:27
  assign io_in_valid__bore_0 = io_in_valid;	// src/main/scala/nutcore/backend/seq/WBU.scala:25:7
  assign io_wb_rfDest__bore = io_in_bits_decode_ctrl_rfDest;	// src/main/scala/nutcore/backend/seq/WBU.scala:25:7
  assign io_in_bits_decode_cf_pc__bore = io_in_bits_decode_cf_pc;	// src/main/scala/nutcore/backend/seq/WBU.scala:25:7
  assign io_wb_rfWen__bore = io_wb_rfWen_0;	// src/main/scala/nutcore/backend/seq/WBU.scala:25:7, :32:47
endmodule

