// Generated by CIRCT firtool-1.62.0
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

// Standard header to adapt well known macros for prints and assertions.

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

module AXI4VGA(	// src/main/scala/device/AXI4VGA.scala:115:7
  input         clock,	// src/main/scala/device/AXI4VGA.scala:115:7
                reset,	// src/main/scala/device/AXI4VGA.scala:115:7
  output        io_in_fb_awready,	// src/main/scala/device/AXI4VGA.scala:117:14
  input         io_in_fb_awvalid,	// src/main/scala/device/AXI4VGA.scala:117:14
  input  [31:0] io_in_fb_awaddr,	// src/main/scala/device/AXI4VGA.scala:117:14
  input  [2:0]  io_in_fb_awprot,	// src/main/scala/device/AXI4VGA.scala:117:14
  output        io_in_fb_wready,	// src/main/scala/device/AXI4VGA.scala:117:14
  input         io_in_fb_wvalid,	// src/main/scala/device/AXI4VGA.scala:117:14
  input  [63:0] io_in_fb_wdata,	// src/main/scala/device/AXI4VGA.scala:117:14
  input  [7:0]  io_in_fb_wstrb,	// src/main/scala/device/AXI4VGA.scala:117:14
  input         io_in_fb_bready,	// src/main/scala/device/AXI4VGA.scala:117:14
  output        io_in_fb_bvalid,	// src/main/scala/device/AXI4VGA.scala:117:14
  output [1:0]  io_in_fb_bresp,	// src/main/scala/device/AXI4VGA.scala:117:14
  output        io_in_fb_arready,	// src/main/scala/device/AXI4VGA.scala:117:14
  input         io_in_fb_arvalid,	// src/main/scala/device/AXI4VGA.scala:117:14
  input  [31:0] io_in_fb_araddr,	// src/main/scala/device/AXI4VGA.scala:117:14
  input  [2:0]  io_in_fb_arprot,	// src/main/scala/device/AXI4VGA.scala:117:14
  input         io_in_fb_rready,	// src/main/scala/device/AXI4VGA.scala:117:14
  output        io_in_fb_rvalid,	// src/main/scala/device/AXI4VGA.scala:117:14
  output [1:0]  io_in_fb_rresp,	// src/main/scala/device/AXI4VGA.scala:117:14
  output [63:0] io_in_fb_rdata,	// src/main/scala/device/AXI4VGA.scala:117:14
  output        io_in_ctrl_awready,	// src/main/scala/device/AXI4VGA.scala:117:14
  input         io_in_ctrl_awvalid,	// src/main/scala/device/AXI4VGA.scala:117:14
  input  [31:0] io_in_ctrl_awaddr,	// src/main/scala/device/AXI4VGA.scala:117:14
  input  [2:0]  io_in_ctrl_awprot,	// src/main/scala/device/AXI4VGA.scala:117:14
  output        io_in_ctrl_wready,	// src/main/scala/device/AXI4VGA.scala:117:14
  input         io_in_ctrl_wvalid,	// src/main/scala/device/AXI4VGA.scala:117:14
  input  [63:0] io_in_ctrl_wdata,	// src/main/scala/device/AXI4VGA.scala:117:14
  input  [7:0]  io_in_ctrl_wstrb,	// src/main/scala/device/AXI4VGA.scala:117:14
  input         io_in_ctrl_bready,	// src/main/scala/device/AXI4VGA.scala:117:14
  output        io_in_ctrl_bvalid,	// src/main/scala/device/AXI4VGA.scala:117:14
  output [1:0]  io_in_ctrl_bresp,	// src/main/scala/device/AXI4VGA.scala:117:14
  output        io_in_ctrl_arready,	// src/main/scala/device/AXI4VGA.scala:117:14
  input         io_in_ctrl_arvalid,	// src/main/scala/device/AXI4VGA.scala:117:14
  input  [31:0] io_in_ctrl_araddr,	// src/main/scala/device/AXI4VGA.scala:117:14
  input  [2:0]  io_in_ctrl_arprot,	// src/main/scala/device/AXI4VGA.scala:117:14
  input         io_in_ctrl_rready,	// src/main/scala/device/AXI4VGA.scala:117:14
  output        io_in_ctrl_rvalid,	// src/main/scala/device/AXI4VGA.scala:117:14
  output [1:0]  io_in_ctrl_rresp,	// src/main/scala/device/AXI4VGA.scala:117:14
  output [63:0] io_in_ctrl_rdata,	// src/main/scala/device/AXI4VGA.scala:117:14
  output [23:0] io_vga_rgb,	// src/main/scala/device/AXI4VGA.scala:117:14
  output        io_vga_hsync,	// src/main/scala/device/AXI4VGA.scala:117:14
                io_vga_vsync,	// src/main/scala/device/AXI4VGA.scala:117:14
                io_vga_valid	// src/main/scala/device/AXI4VGA.scala:117:14
);

  wire        _fb_io_in_rvalid;	// src/main/scala/device/AXI4VGA.scala:127:18
  wire [63:0] _fb_io_in_rdata;	// src/main/scala/device/AXI4VGA.scala:127:18
  reg         io_in_fb_rvalid_r;	// src/main/scala/utils/StopWatch.scala:24:20
  reg  [10:0] hCounter;	// src/main/scala/chisel3/util/Counter.scala:61:40
  reg  [9:0]  vCounter;	// src/main/scala/chisel3/util/Counter.scala:61:40
  wire        vInRange = vCounter > 10'h4 & vCounter < 10'h25D;	// src/main/scala/chisel3/util/Counter.scala:61:40, src/main/scala/device/AXI4VGA.scala:144:{51,63,69}
  wire        io_vga_valid_0 = hCounter > 11'hA7 & hCounter < 11'h3C8 & vInRange;	// src/main/scala/chisel3/util/Counter.scala:61:40, src/main/scala/device/AXI4VGA.scala:144:{51,63,69}, :154:28
  reg  [16:0] fbPixelAddrV0;	// src/main/scala/chisel3/util/Counter.scala:61:40
  reg  [16:0] fbPixelAddrV1;	// src/main/scala/chisel3/util/Counter.scala:61:40
  reg         fb_io_in_arvalid_REG;	// src/main/scala/device/AXI4VGA.scala:168:31
  reg  [63:0] data_r;	// src/main/scala/utils/Hold.scala:23:65
  wire [55:0] data = _fb_io_in_rvalid ? _fb_io_in_rdata[55:0] : data_r[55:0];	// src/main/scala/device/AXI4VGA.scala:127:18, src/main/scala/utils/Hold.scala:23:{48,65}
  always @(posedge clock) begin	// src/main/scala/device/AXI4VGA.scala:115:7
    automatic logic nextPixel;	// src/main/scala/device/AXI4VGA.scala:161:78
    nextPixel = hCounter > 11'hA6 & hCounter < 11'h3C7 & vInRange & hCounter[0];	// src/main/scala/chisel3/util/Counter.scala:61:40, src/main/scala/device/AXI4VGA.scala:144:{51,63,69}, :156:31, :161:78
    if (reset) begin	// src/main/scala/device/AXI4VGA.scala:115:7
      io_in_fb_rvalid_r <= 1'h0;	// src/main/scala/device/AXI4VGA.scala:134:24, src/main/scala/utils/StopWatch.scala:24:20
      hCounter <= 11'h0;	// src/main/scala/chisel3/util/Counter.scala:61:40
      vCounter <= 10'h0;	// src/main/scala/chisel3/util/Counter.scala:61:40
      fbPixelAddrV0 <= 17'h0;	// src/main/scala/chisel3/util/Counter.scala:61:40
      fbPixelAddrV1 <= 17'h0;	// src/main/scala/chisel3/util/Counter.scala:61:40
      data_r <= 64'h0;	// src/main/scala/device/AXI4VGA.scala:134:24, src/main/scala/utils/Hold.scala:23:65
    end
    else begin	// src/main/scala/device/AXI4VGA.scala:115:7
      io_in_fb_rvalid_r <=
        io_in_fb_arvalid | ~(io_in_fb_rready & io_in_fb_rvalid_r) & io_in_fb_rvalid_r;	// src/main/scala/chisel3/util/Decoupled.scala:51:35, src/main/scala/utils/StopWatch.scala:24:20, :26:{19,23}, :27:{20,24}
      if (hCounter == 11'h41F) begin	// src/main/scala/chisel3/util/Counter.scala:61:40, :73:24
        hCounter <= 11'h0;	// src/main/scala/chisel3/util/Counter.scala:61:40
        if (vCounter == 10'h273)	// src/main/scala/chisel3/util/Counter.scala:61:40, :73:24
          vCounter <= 10'h0;	// src/main/scala/chisel3/util/Counter.scala:61:40
        else	// src/main/scala/chisel3/util/Counter.scala:73:24
          vCounter <= vCounter + 10'h1;	// src/main/scala/chisel3/util/Counter.scala:61:40, :77:24, src/main/scala/device/AXI4VGA.scala:150:28
      end
      else	// src/main/scala/chisel3/util/Counter.scala:73:24
        hCounter <= hCounter + 11'h1;	// src/main/scala/chisel3/util/Counter.scala:61:40, :77:24
      if (nextPixel & ~(vCounter[0])) begin	// src/main/scala/chisel3/util/Counter.scala:61:40, src/main/scala/device/AXI4VGA.scala:158:31, :161:78, :162:{41,44}
        if (fbPixelAddrV0 == 17'h1D4BF)	// src/main/scala/chisel3/util/Counter.scala:61:40, :73:24
          fbPixelAddrV0 <= 17'h0;	// src/main/scala/chisel3/util/Counter.scala:61:40
        else	// src/main/scala/chisel3/util/Counter.scala:73:24
          fbPixelAddrV0 <= fbPixelAddrV0 + 17'h1;	// src/main/scala/chisel3/util/Counter.scala:61:40, :77:24
      end
      if (nextPixel & vCounter[0]) begin	// src/main/scala/chisel3/util/Counter.scala:61:40, src/main/scala/device/AXI4VGA.scala:158:31, :161:78, :163:41
        if (fbPixelAddrV1 == 17'h1D4BF)	// src/main/scala/chisel3/util/Counter.scala:61:40, :73:24
          fbPixelAddrV1 <= 17'h0;	// src/main/scala/chisel3/util/Counter.scala:61:40
        else	// src/main/scala/chisel3/util/Counter.scala:73:24
          fbPixelAddrV1 <= fbPixelAddrV1 + 17'h1;	// src/main/scala/chisel3/util/Counter.scala:61:40, :77:24
      end
      if (_fb_io_in_rvalid)	// src/main/scala/device/AXI4VGA.scala:127:18
        data_r <= _fb_io_in_rdata;	// src/main/scala/device/AXI4VGA.scala:127:18, src/main/scala/utils/Hold.scala:23:65
    end
    fb_io_in_arvalid_REG <= nextPixel;	// src/main/scala/device/AXI4VGA.scala:161:78, :168:31
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_	// src/main/scala/device/AXI4VGA.scala:115:7
    `ifdef FIRRTL_BEFORE_INITIAL	// src/main/scala/device/AXI4VGA.scala:115:7
      `FIRRTL_BEFORE_INITIAL	// src/main/scala/device/AXI4VGA.scala:115:7
    `endif // FIRRTL_BEFORE_INITIAL
    initial begin	// src/main/scala/device/AXI4VGA.scala:115:7
      automatic logic [31:0] _RANDOM[0:3];	// src/main/scala/device/AXI4VGA.scala:115:7
      `ifdef INIT_RANDOM_PROLOG_	// src/main/scala/device/AXI4VGA.scala:115:7
        `INIT_RANDOM_PROLOG_	// src/main/scala/device/AXI4VGA.scala:115:7
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// src/main/scala/device/AXI4VGA.scala:115:7
        for (logic [2:0] i = 3'h0; i < 3'h4; i += 3'h1) begin
          _RANDOM[i[1:0]] = `RANDOM;	// src/main/scala/device/AXI4VGA.scala:115:7
        end	// src/main/scala/device/AXI4VGA.scala:115:7
        io_in_fb_rvalid_r = _RANDOM[2'h0][0];	// src/main/scala/device/AXI4VGA.scala:115:7, src/main/scala/utils/StopWatch.scala:24:20
        hCounter = _RANDOM[2'h0][12:2];	// src/main/scala/chisel3/util/Counter.scala:61:40, src/main/scala/device/AXI4VGA.scala:115:7, src/main/scala/utils/StopWatch.scala:24:20
        vCounter = _RANDOM[2'h0][22:13];	// src/main/scala/chisel3/util/Counter.scala:61:40, src/main/scala/device/AXI4VGA.scala:115:7, src/main/scala/utils/StopWatch.scala:24:20
        fbPixelAddrV0 = {_RANDOM[2'h0][31:23], _RANDOM[2'h1][7:0]};	// src/main/scala/chisel3/util/Counter.scala:61:40, src/main/scala/device/AXI4VGA.scala:115:7, src/main/scala/utils/StopWatch.scala:24:20
        fbPixelAddrV1 = _RANDOM[2'h1][24:8];	// src/main/scala/chisel3/util/Counter.scala:61:40, src/main/scala/device/AXI4VGA.scala:115:7
        fb_io_in_arvalid_REG = _RANDOM[2'h1][25];	// src/main/scala/chisel3/util/Counter.scala:61:40, src/main/scala/device/AXI4VGA.scala:115:7, :168:31
        data_r = {_RANDOM[2'h1][31:26], _RANDOM[2'h2], _RANDOM[2'h3][25:0]};	// src/main/scala/chisel3/util/Counter.scala:61:40, src/main/scala/device/AXI4VGA.scala:115:7, src/main/scala/utils/Hold.scala:23:65
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// src/main/scala/device/AXI4VGA.scala:115:7
      `FIRRTL_AFTER_INITIAL	// src/main/scala/device/AXI4VGA.scala:115:7
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  VGACtrl ctrl (	// src/main/scala/device/AXI4VGA.scala:125:20
    .clock              (clock),
    .reset              (reset),
    .io_in_awready     (io_in_ctrl_awready),
    .io_in_awvalid     (io_in_ctrl_awvalid),
    .io_in_wready      (io_in_ctrl_wready),
    .io_in_wvalid      (io_in_ctrl_wvalid),
    .io_in_bready      (io_in_ctrl_bready),
    .io_in_bvalid      (io_in_ctrl_bvalid),
    .io_in_arready     (io_in_ctrl_arready),
    .io_in_arvalid     (io_in_ctrl_arvalid),
    .io_in_araddr (io_in_ctrl_araddr),
    .io_in_rready      (io_in_ctrl_rready),
    .io_in_rvalid      (io_in_ctrl_rvalid),
    .io_in_rdata  (io_in_ctrl_rdata)
  );
  AXI4RAM fb (	// src/main/scala/device/AXI4VGA.scala:127:18
    .clock              (clock),
    .reset              (reset),
    .io_in_awready     (io_in_fb_awready),
    .io_in_awvalid     (io_in_fb_awvalid),
    .io_in_awaddr (io_in_fb_awaddr),
    .io_in_wready      (io_in_fb_wready),
    .io_in_wvalid      (io_in_fb_wvalid),
    .io_in_wdata  (io_in_fb_wdata),
    .io_in_wstrb  (io_in_fb_wstrb),
    .io_in_bready      (io_in_fb_bready),
    .io_in_bvalid      (io_in_fb_bvalid),
    .io_in_arvalid     (fb_io_in_arvalid_REG & hCounter[1:0] == 2'h2),	// src/main/scala/chisel3/util/Counter.scala:61:40, src/main/scala/device/AXI4VGA.scala:115:7, :157:{29,35}, :168:{31,43}
    .io_in_araddr ({13'h0, vCounter[0] ? fbPixelAddrV1 : fbPixelAddrV0, 2'h0}),	// src/main/scala/chisel3/util/Counter.scala:61:40, src/main/scala/device/AXI4VGA.scala:115:7, :158:31, :167:{25,35}
    .io_in_rvalid      (_fb_io_in_rvalid),
    .io_in_rdata  (_fb_io_in_rdata)
  );
  assign io_in_fb_bresp = 2'h0;	// src/main/scala/device/AXI4VGA.scala:115:7
  assign io_in_fb_arready = 1'h1;	// src/main/scala/device/AXI4VGA.scala:115:7, :133:21
  assign io_in_fb_rvalid = io_in_fb_rvalid_r;	// src/main/scala/device/AXI4VGA.scala:115:7, src/main/scala/utils/StopWatch.scala:24:20
  assign io_in_fb_rresp = 2'h0;	// src/main/scala/device/AXI4VGA.scala:115:7
  assign io_in_fb_rdata = 64'h0;	// src/main/scala/device/AXI4VGA.scala:115:7, :134:24
  assign io_in_ctrl_bresp = 2'h0;	// src/main/scala/device/AXI4VGA.scala:115:7
  assign io_in_ctrl_rresp = 2'h0;	// src/main/scala/device/AXI4VGA.scala:115:7
  assign io_vga_rgb = io_vga_valid_0 ? (hCounter[1] ? data[55:32] : data[23:0]) : 24'h0;	// src/main/scala/chisel3/util/Counter.scala:61:40, src/main/scala/device/AXI4VGA.scala:115:7, :154:28, :173:{23,32,41,55}, :174:20, src/main/scala/utils/Hold.scala:23:48
  assign io_vga_hsync = hCounter > 11'h27;	// src/main/scala/chisel3/util/Counter.scala:61:40, src/main/scala/device/AXI4VGA.scala:115:7, :149:28
  assign io_vga_vsync = |vCounter;	// src/main/scala/chisel3/util/Counter.scala:61:40, src/main/scala/device/AXI4VGA.scala:115:7, :150:28
  assign io_vga_valid = io_vga_valid_0;	// src/main/scala/device/AXI4VGA.scala:115:7, :154:28
endmodule

